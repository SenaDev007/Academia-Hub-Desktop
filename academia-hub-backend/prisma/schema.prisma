generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  SUPER_ADMIN
  SCHOOL_ADMIN
  TEACHER
  STUDENT
  PARENT
}

enum DocumentStatus {
  DRAFT
  FINAL
  ARCHIVED
}

enum NotificationStatus {
  PENDING
  SENT
  READ
  FAILED
  CANCELLED
}

enum NotificationType {
  SYSTEM
  REMINDER
  UPDATE
  ALERT
  ANNOUNCEMENT
  PERSONAL
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  ERROR
  IMPORT
  EXPORT
  PASSWORD_RESET
  ROLE_CHANGE
  PERMISSION_CHANGE
  ACCOUNT_LOCK
  ACCOUNT_UNLOCK
  ACCOUNT_DISABLE
  ACCOUNT_ENABLE
  LOGIN_ATTEMPT
  LOGIN_FAILURE
  LOGIN_SUCCESS
}

enum WeekDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum AbsenceStatus {
  UNJUSTIFIED
  JUSTIFIED
  ABSENT
  PRESENT
  EXCUSED
}

enum PaymentStatus {
  PENDING
  PAID
  PARTIALLY_PAID
  OVERPAID
  REFUNDED
  CANCELLED
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  ONLINE_PAYMENT
  CHEQUE
  OTHER
}

enum DocumentType {
  IDENTITY
  MEDICAL
  ACADEMIC
  OTHER
  CAHIER_JOURNAL
  BULLETIN
  TIMETABLE
  REPORT
}

enum EnrollmentStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum TransferStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum CahierJournalStatus {
  PLANIFIED
  IN_PROGRESS
  COMPLETED
  VALIDATED
  REJECTED
  ARCHIVED
}

enum CahierJournalTemplateType {
  STANDARD
  CUSTOM
  REUSABLE
}

enum CahierJournalExportFormat {
  PDF
  DOCX
  XLSX
  CSV
}

enum CahierJournalNotificationType {
  EMAIL
  WHATSAPP
  SMS
  IN_APP
}

enum PlanningStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  CANCELLED
}

enum PlanningType {
  WEEKLY
  MONTHLY
  SEMESTER
  ANNUAL
}

enum PlanningNotificationType {
  REMINDER
  UPDATE
  CANCEL
  RESCHEDULE
}

enum GradeStatus {
  DRAFT
  SUBMITTED
  VALIDATED
  CORRECTED
  PUBLISHED
}

enum GradeType {
  // Maternelle
  QUALITATIVE
  // Primaire
  EM1
  EM2
  EC
  // Secondaire
  IE1
  IE2
  DS1
  DS2
}

enum CompetenceLevel {
  EXPERT
  AVANCE
  INTERMEDIAIRE
  DEBUTANT
}

enum CompetenceDomain {
  DISCIPLINAIRE
  METHODOLOGIQUE
  SOCIALE_CIVIQUE
  PERSONNELLE_AUTONOMIE
}

model CompetenceDomainDescription {
  id          String    @id @default(cuid())
  domain      CompetenceDomain
  description String
  criteria    String[]  // Critères d'évaluation du domaine
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String
  level       String    // Ex: "MATERNELLE", "PRIMAIRE", "SECOND_CYCLE"

  @@index([domain, schoolId])
  @@unique([domain, schoolId, level])
}

model Room {
  id          String    @id @default(cuid())
  name        String
  capacity    Int
  type        String    // SALLE, LABO, BIBLIOTHEQUE, etc.
  description String?
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String
  schedules   Schedule[] @relation("RoomSchedules")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([schoolId])
  @@unique([schoolId, name])
}

enum GradeQualitative {
  TS
  S
  PS
}

model GradeScale {
  id          String    @id @default(cuid())
  level       String    // "MATERNELLE", "PRIMAIRE", "SECOND_CYCLE"
  minScore    Float
  maxScore    Float
  emoji       String?
  description String
  observation String
  recommendation String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String

  @@index([level, schoolId])
  @@unique([level, minScore, maxScore, schoolId])
}

model GradeScalePrimary {
  id          String    @id @default(cuid())
  minScore    Float
  maxScore    Float
  emoji       String
  description String
  observation String
  recommendation String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String

  @@index([schoolId])
  @@unique([minScore, maxScore, schoolId])
}

enum GradeMention {
  TRES_BIEN
  BIEN
  ASSEZ_BIEN
  PASSABLE
  INSUFFISANT
  TRES_INSUFFISANT
}

enum GradeCalculationMethod {
  QUALITATIVE
  SIMPLE
  WEIGHTED
}

enum GradeImportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum ExamType {
  DS1
  DS2
  DS3
  DS4
  DS5
  DS6
  DS7
  DS8
  EM1
  EM2
  EC
  DS
  DS1_1
  DS1_2
  DS1_3
  DS1_4
  DS1_5
  DS1_6
  DS1_7
  DS1_8
  DS2_1
  DS2_2
  DS2_3
  DS2_4
  DS2_5
  DS2_6
  DS2_7
  DS2_8
  DS3_1
  DS3_2
  DS3_3
  DS3_4
  DS3_5
  DS3_6
  DS3_7
  DS3_8
  DS4_1
  DS4_2
  DS4_3
  DS4_4
  DS4_5
  DS4_6
  DS4_7
  DS4_8
  DS5_1
  DS5_2
  DS5_3
  DS5_4
  DS5_5
  DS5_6
  DS5_7
  DS5_8
  DS6_1
  DS6_2
  DS6_3
  DS6_4
  DS6_5
  DS6_6
  DS6_7
  DS6_8
  DS7_1
  DS7_2
  DS7_3
  DS7_4
  DS7_5
  DS7_6
  DS7_7
  DS7_8
  DS8_1
  DS8_2
  DS8_3
  DS8_4
  DS8_5
  DS8_6
  DS8_7
  DS8_8
  EM1_1
  EM1_2
  EM1_3
  EM1_4
  EM1_5
  EM1_6
  EM1_7
  EM1_8
  EM2_1
  EM2_2
  EM2_3
  EM2_4
  EM2_5
  EM2_6
  EM2_7
  EM2_8
  EC_1
  EC_2
  EC_3
  EC_4
  EC_5
  EC_6
  EC_7
  EC_8
  DS_1
  DS_2
  DS_3
  DS_4
  DS_5
  DS_6
  DS_7
  DS_8
}

enum ExamNotificationType {
  SESSION_CREATED
  SESSION_UPDATED
  SESSION_CANCELLED
  GRADE_PUBLISHED
  GRADE_UPDATED
  REMINDER
  ANNOUNCEMENT
}

enum FeeStatus {
  PENDING
  PAID
  PARTIALLY_PAID
  OVERDUE
  WAIVED
  REFUNDED
}

enum PayrollStatus {
  PENDING
  APPROVED
  PAID
  REJECTED
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  EXPIRED
  TRIAL
}

enum UserRole {
  ADMIN
  TEACHER
  STUDENT
  PARENT
  STAFF
}

// Modèles de base
model School {
  id            String    @id @default(cuid())
  name          String
  address       String
  email         String    @unique
  phone         String
  logo          String?
  website       String?
  description   String?
  schoolId      String    @default(cuid())
  academicYear  String    // 2023-2024
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Modèles CahierJournal
  cahierJournalTemplates CahierJournalTemplate[]
  cahierJournalWorkflows CahierJournalWorkflow[]
  cahierJournalNotifications CahierJournalNotification[]
  cahierJournalExports CahierJournalExport[]

  // Relations avec les utilisateurs
  students      Student[] @relation("SchoolStudents")
  teachers      Teacher[] @relation("SchoolTeachers")
  parents       Parent[]  @relation("SchoolParents")
  users         User[]    @relation("SchoolUsers")

  // Modèles académiques
  classes       Class[]
  subjects      Subject[]
  grades        Grade[]

  // Gestion administrative
  promoters     SchoolPromoter[]
  admins        SchoolAdmin[]

  // Relations financières
  feeTypes      FeeType[]
  feeConfigurations FeeConfiguration[]
  invoices      Invoice[]
  budgets       Budget[]

  // Relations de paie
  payrollBatches PayrollBatch[]
  payrollSettings PayrollSettings[]

  // Abonnement et plan
  subscription  Subscription? @relation("SchoolSubscription")
  subscriptionId String? @unique
  plan          Plan?     @relation("SchoolPlan", fields: [planId], references: [id])
  planId        String? @unique
  trialEndDate  DateTime?

  @@index([subscriptionId])
  @@index([planId])
}

model User {
  id          String    @id @default(cuid())
  schoolId    String
  email       String    @unique
  password    String
  firstName   String
  lastName    String
  role        Role
  status      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  school      School    @relation(fields: [schoolId], references: [id])
  refreshTokens RefreshToken[]
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  schoolId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
  school    School   @relation(fields: [schoolId], references: [id])
}

}

// Modèle pour les paramètres de paie
model PayrollSettings {
  id          String    @id @default(cuid())
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String
  currency    String    // USD, EUR, etc.
  taxRate     Float     // taux d'impôt
  socialSecurityRate Float // taux de sécurité sociale
  minimumSalary Decimal  // salaire minimum
  overtimeRate Float     // taux des heures supplémentaires
  paymentDay  Int       // jour du mois pour le paiement
  workingDays Int       // jours travaillés par mois
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  createdBy   User      @relation("SettingsCreatedBy", fields: [createdById], references: [id])
  createdById String
  approvedBy  User?     @relation("SettingsApprovedBy", fields: [approvedById], references: [id])
  approvedById String?

  @@index([schoolId])
  @@index([createdById])
  @@index([approvedById])
}

// Modèle pour les lots de paie
model PayrollBatch {
  id          String    @id @default(cuid())
  name        String
  periodStart DateTime
  periodEnd   DateTime
  status      String    // pending, processing, completed, failed
  totalAmount Decimal
  currency    String    // USD, EUR, etc.
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String
  createdBy   User      @relation("BatchCreatedBy", fields: [createdById], references: [id])
  createdById String
  approvedBy  User?     @relation("BatchApprovedBy", fields: [approvedById], references: [id])
  approvedById String?

  @@index([status])
  @@index([periodStart])
  @@index([periodEnd])
  @@index([createdById])
  @@index([approvedById])
  @@index([schoolId])
}

// Modèle pour les paies
model Payroll {
  id          String    @id @default(cuid())
  employee    User      @relation("EmployeePayrolls", fields: [employeeId], references: [id])
  employeeId  String
  batch       PayrollBatch @relation(fields: [batchId], references: [id])
  batchId     String
  amount      Decimal
  currency    String    // USD, EUR, etc.
  status      PayrollStatus
  payment     Payment?  @relation(fields: [paymentId], references: [id])
  paymentId   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  createdBy   User      @relation("CreatedPayrolls", fields: [createdById], references: [id])
  createdById String
  approvedBy  User?     @relation("ApprovedPayrolls", fields: [approvedById], references: [id])
  approvedById String?
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String

  @@index([status])
  @@index([batchId])
  @@index([employeeId])
  @@index([createdById])
  @@index([approvedById])
  @@index([schoolId])
}

// Modèle pour les budgets
model Budget {
  id          String    @id @default(cuid())
  category    String    // salaries, supplies, maintenance, etc.
  amount      Decimal
  currency    String    // USD, EUR, etc.
  description String?
  startDate   DateTime
  endDate     DateTime
  status      String    // planned, approved, in_progress, completed
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Modèle CahierJournalEntry
model CahierJournalEntry {
  id          String    @id @default(cuid())
  date        DateTime
  classeId    String
  matiereId   String
  duree       Int
  objectifs   String
  competences String[]
  deroulement String
  supports    String
  evaluation  String
  observations String
  statut      CahierJournalStatus
  templateId  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  classe      Class     @relation(fields: [classeId], references: [id])
  matiere     Subject   @relation(fields: [matiereId], references: [id])
  template    CahierJournalTemplate? @relation(fields: [templateId], references: [id])
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String
  createdBy   User      @relation("EntryCreatedBy", fields: [createdById], references: [id])
  createdById String
  validatedBy User?     @relation("EntryValidatedBy", fields: [validatedById], references: [id])
  validatedById String?
  notifications CahierJournalNotification[]
  history     CahierJournalHistory[]
  exports     CahierJournalExport[]

  @@index([date])
  @@index([classeId])
  @@index([matiereId])
  @@index([statut])
  @@index([schoolId])
  @@index([createdById])
  @@index([validatedById])
}

// Modèle CahierJournalTemplate
model CahierJournalTemplate {
  id          String    @id @default(cuid())
  name        String
  type        CahierJournalTemplateType
  content     String
  competences String[]
  isReusable  Boolean   @default(false)
  isDefault   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String
  createdBy   User      @relation("TemplateCreatedBy", fields: [createdById], references: [id])
  createdById String
  entries     CahierJournalEntry[]

  @@index([name])
  @@index([type])
  @@index([isReusable])
  @@index([isDefault])
  @@index([schoolId])
  @@index([createdById])
}

model AcademicCalendar {
  id          String    @id @default(cuid())
  name        String    // Ex: "Calendrier 2023-2024"
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String
  years       AcademicYear[]

  @@index([schoolId])
  @@unique([name, schoolId])
}

model AcademicYear {
  id          String    @id @default(cuid())
  name        String    // Ex: "2023-2024"
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String
  trimesters  AcademicTrimester[]
  sessions    ExamSession[]
  calendar    AcademicCalendar @relation(fields: [calendarId], references: [id])
  calendarId  String

  @@index([schoolId])
  @@unique([name, schoolId])
}

model AcademicTrimester {
  id          String    @id @default(cuid())
  number      Int       // 1, 2, ou 3
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  year        AcademicYear @relation(fields: [yearId], references: [id])
  yearId      String
  sessions    ExamSession[]
  grades      ExamGrade[]

  @@index([yearId])
  @@unique([number, yearId])
}

model ExamSession {
  id          String    @id @default(cuid())
  name        String    // Ex: "EM1 T1", "IE1 T1", etc.
  description String?
  startDate   DateTime
  endDate     DateTime
  type        GradeType
  month       Int      // 1, 2, ou 3 selon le mois du trimestre
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String
  trimester   AcademicTrimester @relation(fields: [trimesterId], references: [id])
  trimesterId String
  grades      ExamGrade[]

  @@index([schoolId])
  @@index([type])
  @@unique([name, schoolId])
}

model ExamGrade {
  id          String    @id @default(cuid())
  value       Float     // Note sur 20
  qualitative GradeQualitative? // Note qualitative (pour maternelle)
  mention     GradeMention?    // Mention (pour secondaire)
  coef        Float     @default(1) // Coefficient de la matière
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  student     Student   @relation(fields: [studentId], references: [id])
  studentId   String
  subject     Subject   @relation(fields: [subjectId], references: [id])
  subjectId   String
  class       Class     @relation(fields: [classId], references: [id])
  classId     String
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String
  session     ExamSession @relation(fields: [sessionId], references: [id])
  sessionId   String
  trimester   AcademicTrimester @relation(fields: [trimesterId], references: [id])
  trimesterId String
  competences Competence[]
  history     ExamGradeHistory[]

  @@index([studentId, subjectId, trimesterId, sessionId])
  @@unique([studentId, subjectId, trimesterId, sessionId])
}

model Competence {
  id          String    @id @default(cuid())
  title       String    // Ex: "Maîtrise des nombres jusqu'à 1000"
  description String?
  domain      CompetenceDomain
  level       CompetenceLevel
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  subject     Subject   @relation(fields: [subjectId], references: [id])
  subjectId   String
  grade       ExamGrade @relation(fields: [gradeId], references: [id])
  gradeId     String
  student     Student   @relation(fields: [studentId], references: [id])
  studentId   String
  class       Class     @relation(fields: [classId], references: [id])
  classId     String
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String

  @@index([subjectId])
  @@index([studentId])
  @@index([classId])
  @@index([schoolId])
  @@unique([title, subjectId, studentId])
}

model SubjectCoefficient {
  id          String    @id @default(cuid())
  coefficient Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  subject     Subject   @relation(fields: [subjectId], references: [id])
  subjectId   String
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String
  level       String    // Ex: "2ndeC", "1ereC", etc.

  @@index([subjectId, schoolId])
  @@unique([subjectId, schoolId, level])
}

model ExamGradeHistory {
  id          String    @id @default(cuid())
  oldValue    Float?    // Ancienne valeur numérique
  oldQualitative GradeQualitative? // Ancienne valeur qualitative
  newValue    Float?    // Nouvelle valeur numérique
  newQualitative GradeQualitative? // Nouvelle valeur qualitative
  oldMention  GradeMention?    // Ancienne mention
  newMention  GradeMention?    // Nouvelle mention
  updatedBy   User     @relation(fields: [updatedById], references: [id])
  updatedById String
  updatedAt   DateTime  @default(now())

  // Relations
  grade       ExamGrade @relation(fields: [gradeId], references: [id])
  gradeId     String

  @@index([gradeId])
  @@index([updatedById])
}

// Modèle CahierJournalHistory
model CahierJournalHistory {
  id          String    @id @default(cuid())
  entryId     String
  action      String    // created, updated, validated, rejected
  oldValue    String?
  newValue    String?
  reason      String?
  createdAt   DateTime  @default(now())

  // Relations
  entry       CahierJournalEntry @relation(fields: [entryId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String

  @@index([entryId])
  @@index([action])
  @@index([createdAt])
  @@index([schoolId])
  @@index([userId])
}

// Modèle CahierJournalWorkflow
model CahierJournalWorkflow {
  id          String    @id @default(cuid())
  name        String
  steps       String[]  // ["enseignant", "chef_departement", "directeur"]
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String
  createdBy   User      @relation("WorkflowCreatedBy", fields: [createdById], references: [id])
  createdById String
  entries     CahierJournalEntry[]

  @@index([name])
  @@index([active])
  @@index([schoolId])
  @@index([createdById])
}

// Modèle CahierJournalNotification
model CahierJournalNotification {
  id          String    @id @default(cuid())
  type        CahierJournalNotificationType
  content     String
  status      String    @default("pending") // pending, sent, failed
  sentAt      DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  entry       CahierJournalEntry @relation(fields: [entryId], references: [id])
  entryId     String
  recipient   User      @relation(fields: [recipientId], references: [id])
  recipientId String
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String
  sentBy      User?     @relation("NotificationSentBy", fields: [sentById], references: [id])
  sentById    String?

  @@index([type])
  @@index([status])
  @@index([sentAt])
  @@index([schoolId])
  @@index([recipientId])
  @@index([sentById])
}

// Modèle CahierJournalExport
model CahierJournalExport {
  id          String    @id @default(cuid())
  format      CahierJournalExportFormat
  content     String
  status      String    @default("pending") // pending, processing, completed, failed
  fileName    String
  fileSize    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  entry       CahierJournalEntry @relation(fields: [entryId], references: [id])
  entryId     String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String

  @@index([format])
  @@index([status])
  @@index([createdAt])
  @@index([schoolId])
  @@index([userId])
}

// Modèles pour les examens

model ExamSessionHistory {
  id          String    @id @default(cuid())
  changes     String
  createdAt   DateTime  @default(now())

  // Relations
  session     ExamSession @relation(fields: [sessionId], references: [id])
  sessionId   String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String

  @@index([sessionId])
  @@index([createdAt])
  @@index([schoolId])
  @@index([userId])
}

model ExamSessionNotification {
  id          String    @id @default(cuid())
  type        ExamNotificationType
  content     String
  status      NotificationStatus
  sentAt      DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  session     ExamSession @relation(fields: [sessionId], references: [id])
  sessionId   String
  recipient   User      @relation(fields: [recipientId], references: [id])
  recipientId String
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String
  sentBy      User?     @relation(fields: [sentById], references: [id])
  sentById    String?

  @@index([type])
  @@index([status])
  @@index([sentAt])
  @@index([schoolId])
  @@index([recipientId])
  @@index([sentById])
}



model ExamExport {
  id          String    @id @default(cuid())
  format      String    // CSV, XLSX, PDF
  content     String
  status      String    @default("pending") // pending, processing, completed, failed
  fileName    String
  fileSize    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  session     ExamSession @relation(fields: [sessionId], references: [id])
  sessionId   String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String

  @@index([format])
  @@index([status])
  @@index([createdAt])
  @@index([schoolId])
  @@index([userId])
}

// Modèles pour le planning
model AcademicSchedule {
  id          String    @id @default(cuid())
  name        String
  type        PlanningType
  status      PlanningStatus
  startDate   DateTime
  endDate     DateTime
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String
  createdBy   User      @relation(fields: [createdById], references: [id])
  createdById String
  validatedBy User?     @relation(fields: [validatedById], references: [id])
  validatedById String?
  entries     AcademicScheduleEntry[]
  notifications AcademicScheduleNotification[]
  exports     AcademicScheduleExport[]

  @@index([type])
  @@index([status])
  @@index([startDate])
  @@index([endDate])
  @@index([schoolId])
  @@index([createdById])
  @@index([validatedById])
}

model AcademicScheduleEntry {
  id          String    @id @default(cuid())
  date        DateTime
  startTime   String    // Format HH:mm
  endTime     String    // Format HH:mm
  description String
  location    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  schedule    AcademicSchedule @relation(fields: [scheduleId], references: [id])
  scheduleId  String
  class       Class     @relation(fields: [classId], references: [id])
  classId     String
  subject     Subject   @relation(fields: [subjectId], references: [id])
  subjectId   String
  teacher     User      @relation(fields: [teacherId], references: [id])
  teacherId   String
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String
  notifications AcademicScheduleNotification[]

  @@index([date])
  @@index([scheduleId])
  @@index([classId])
  @@index([subjectId])
  @@index([teacherId])
  @@index([schoolId])
}

model AcademicScheduleNotification {
  id          String    @id @default(cuid())
  type        PlanningNotificationType
  content     String
  status      NotificationStatus
  sentAt      DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  schedule    AcademicSchedule? @relation(fields: [scheduleId], references: [id])
  scheduleId  String?
  entry       AcademicScheduleEntry? @relation(fields: [entryId], references: [id])
  entryId     String?
  recipient   User      @relation(fields: [recipientId], references: [id])
  recipientId String
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String
  sentBy      User?     @relation(fields: [sentById], references: [id])
  sentById    String?

  @@index([type])
  @@index([status])
  @@index([sentAt])
  @@index([schoolId])
  @@index([recipientId])
  @@index([sentById])
}

model AcademicScheduleExport {
  id          String    @id @default(cuid())
  format      String    // CSV, XLSX, PDF
  content     String
  status      String    @default("pending") // pending, processing, completed, failed
  fileName    String
  fileSize    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  schedule    AcademicSchedule @relation(fields: [scheduleId], references: [id])
  scheduleId  String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String

  @@index([format])
  @@index([status])
  @@index([createdAt])
  @@index([schoolId])
  @@index([userId])
}

// Modèles de sécurité
model SecurityLog {
  id          String    @id @default(cuid())
  action      AuditAction
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  description String
  ip          String?
  userAgent   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([action])
  @@index([userId])
  @@index([createdAt])
  @@index([updatedAt])
}

model LoginAttempt {
  id          String    @id @default(cuid())
  email       String
  success     Boolean
  ip          String?
  userAgent   String?
  createdAt   DateTime  @default(now())

  // Relations
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String

  @@index([email])
  @@index([success])
  @@index([createdAt])
  @@index([schoolId])
}

// Modèles de support
model SupportTicket {
  id          String    @id @default(cuid())
  title       String
  description String
  status      String    // open, in_progress, resolved, closed
  priority    String    // low, medium, high, urgent
  type        String    // technical, billing, general, other
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String
  messages    SupportMessage[]
  attachments SupportAttachment[]

  @@index([status])
  @@index([priority])
  @@index([type])
  @@index([createdAt])
  @@index([schoolId])
  @@index([userId])
}

model SupportMessage {
  id          String    @id @default(cuid())
  content     String
  isStaff     Boolean
  createdAt   DateTime  @default(now())

  // Relations
  ticket      SupportTicket @relation(fields: [ticketId], references: [id])
  ticketId    String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String

  @@index([ticketId])
  @@index([createdAt])
  @@index([schoolId])
  @@index([userId])
}

model SupportAttachment {
  id          String    @id @default(cuid())
  fileName    String
  fileType    String
  fileSize    Int
  url         String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  ticket      SupportTicket @relation(fields: [ticketId], references: [id])
  ticketId    String
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String
  uploadedBy  User      @relation(fields: [uploadedById], references: [id])
  uploadedById String

  @@index([ticketId])
  @@index([createdAt])
  @@index([schoolId])
  @@index([uploadedById])
}


model DocumentVersion {
  id          String    @id @default(cuid())
  content     String
  version     Int
  changes     String
  createdAt   DateTime  @default(now())

  // Relations
  document    Document  @relation(fields: [documentId], references: [id])
  documentId  String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String

  @@index([documentId])
  @@index([version])
  @@index([createdAt])
  @@index([schoolId])
  @@index([userId])
}

model DocumentTag {
  id          String    @id @default(cuid())
  name        String
  color       String
  createdAt   DateTime  @default(now())

  // Relations
  document    Document  @relation(fields: [documentId], references: [id])
  documentId  String
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String

  @@index([name])
  @@index([createdAt])
  @@index([schoolId])
}

// Modèles de notification
model Notification {
  id          String    @id @default(cuid())
  title       String
  content     String
  type        String    // system, reminder, update, alert
  status      NotificationStatus
  sentAt      DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  recipient   User      @relation(fields: [recipientId], references: [id])
  recipientId String
  sender      User?     @relation(fields: [senderId], references: [id])
  senderId    String?
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String

  @@index([type])
  @@index([status])
  @@index([sentAt])
  @@index([schoolId])
  @@index([recipientId])
  @@index([senderId])
}

model StudentAverage {
  id          String    @id @default(cuid())
  trimester   String    // T1, T2, T3
  year        String    // année scolaire
  level       String    // MATERNELLE, PRIMAIRE, FIRST_CYCLE, SECOND_CYCLE
  average     Float
  rank        Int
  rankGender  Int?
  rankExAequo Boolean
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  student     Student   @relation(fields: [studentId], references: [id])
  studentId   String
  class       Class     @relation(fields: [classId], references: [id])
  classId     String
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String
  schoolReport SchoolReport?

  @@index([studentId])
  @@index([trimester])
  @@index([year])
  @@index([classId])
  @@index([schoolId])
  @@unique([studentId, trimester, year, classId, schoolId])
}

model SchoolReport {
  id          String    @id @default(cuid())
  trimester   String    // T1, T2, T3
  year        String    // année scolaire
  level       String    // MATERNELLE, PRIMAIRE, FIRST_CYCLE, SECOND_CYCLE
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  student     Student   @relation(fields: [studentId], references: [id])
  studentId   String
  class       Class     @relation(fields: [classId], references: [id])
  classId     String
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String
  grades      ExamGrade[]
  comments    SchoolReportComment[]
  attachments SchoolReportAttachment[]
  document    Document?

  @@index([studentId])
  @@index([trimester])
  @@index([year])
  @@index([classId])
  @@index([schoolId])
  @@unique([studentId, trimester, year, classId, schoolId])
}

model SchoolReportComment {
  id          String    @id @default(cuid())
  content     String
  type        String    // general, subject, behavior
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  report      SchoolReport @relation(fields: [reportId], references: [id])
  reportId    String
  subject     Subject?    @relation(fields: [subjectId], references: [id])
  subjectId   String?
  teacher     Teacher     @relation(fields: [teacherId], references: [id])
  teacherId   String

  @@index([reportId])
  @@index([subjectId])
  @@index([teacherId])
}

model SchoolReportAttachment {
  id          String    @id @default(cuid())
  fileName    String
  fileType    String
  fileSize    Int
  url         String
  createdAt   DateTime  @default(now())

  // Relations
  report      SchoolReport @relation(fields: [reportId], references: [id])
  reportId    String
  uploadedBy  User      @relation(fields: [uploadedById], references: [id])
  uploadedById String

  @@index([reportId])
  @@index([uploadedById])
}

}

model ScheduleExport {
  id          String    @id @default(cuid())
  format      String    // CSV, XLSX, PDF
  content     String
  status      String    @default("pending") // pending, processing, completed, failed
  fileName    String
  fileSize    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  schedule    Schedule  @relation(fields: [scheduleId], references: [id])
  scheduleId  String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String

  @@index([format])
  @@index([status])
  @@index([createdAt])
  @@index([schoolId])
  @@index([userId])
}

// Modèle pour les dépenses
enum ExpenseStatus {
  PENDING
  APPROVED
  PAID
  REJECTED
}

model Expense {
  id          String    @id @default(cuid())
  amount      Decimal
  currency    String
  description String
  category    String    // salaries, supplies, maintenance, etc.
  date        DateTime  @default(now())
  dueDate     DateTime?
  status      ExpenseStatus
  payment     Payment?  @relation(fields: [paymentId], references: [id])
  paymentId   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String
  createdBy   User      @relation("ExpenseCreatedBy", fields: [createdById], references: [id])
  createdById String
  approvedBy  User?     @relation("ExpenseApprovedBy", fields: [approvedById], references: [id])
  approvedById String?

  @@index([schoolId])
  @@index([date])
  @@index([dueDate])
}

model Payment {
  id          String    @id @default(cuid())
  amount      Decimal
  currency    String
  status      String    // PENDING, PAID, FAILED, REFUNDED
  type        String    // TUITION, FEE, EXPENSE, SALARY, OTHER
  date        DateTime  @default(now())
  dueDate     DateTime?
  method      String    // CASH, BANK_TRANSFER, MOBILE_MONEY, CHECK, OTHER
  reference   String?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String
  student     Student?  @relation(fields: [studentId], references: [id])
  studentId   String?
  expense     Expense?  @relation(fields: [expenseId], references: [id])
  expenseId   String?
  createdBy   User      @relation("PaymentCreatedBy", fields: [createdById], references: [id])
  createdById String
  approvedBy  User?     @relation("PaymentApprovedBy", fields: [approvedById], references: [id])
  approvedById String?
  invoice     Invoice?  @relation(fields: [invoiceId], references: [id])
  invoiceId   String?
  closingDay  ClosingDay? @relation(fields: [closingDayId], references: [id])
  closingDayId String?

  @@index([schoolId])
  @@index([date])
  @@index([status])
  @@index([method])
  @@index([dueDate])
  @@index([createdById])
  @@index([approvedById])
  @@index([invoiceId])
  @@index([closingDayId])
}

// Modèle Admin
model Admin {
  id          String    @id @default(cuid())
  user        User      @relation("AdminUser", fields: [userId], references: [id])
  userId      String
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String
  position    String    // directeur, assistant, etc.
  department  String?   // département spécifique
  permissions Json      // permissions spécifiques
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
  @@index([schoolId])
  @@index([position])
}

// Modèle pour les documents
model Document {
  id          String    @id @default(cuid())
  title       String
  description String?
  type        DocumentType
  category    String    // academic, administrative, medical, etc.
  fileUrl     String
  fileName    String
  fileSize    Int
  fileType    String
  uploadedBy  User     @relation(fields: [uploadedById], references: [id])
  uploadedById String
  school      School   @relation(fields: [schoolId], references: [id])
  schoolId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([type])
  @@index([category])
  @@index([uploadedById])
  @@index([schoolId])
}

// Modèle pour les transferts de classe
model ClassTransfer {
  id          String    @id @default(cuid())
  student     Student   @relation(fields: [studentId], references: [id])
  studentId   String
  fromClass   Class     @relation("FromClassTransfer", fields: [fromClassId], references: [id])
  fromClassId String
  toClass     Class     @relation("ToClassTransfer", fields: [toClassId], references: [id])
  toClassId   String
  date        DateTime
  reason      String?
  status      String    // pending, approved, rejected
  approvedBy  User?     @relation(fields: [approvedById], references: [id])
  approvedById String?
  approvedAt  DateTime?
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([studentId])
  @@index([fromClassId])
  @@index([toClassId])
  @@index([status])
  @@index([schoolId])
  @@index([date])
}

// Modèle pour le budget



model SchoolPromoter {
  id        String    @id @default(cuid())
  userId    String    @unique
  school    School    @relation(fields: [schoolId], references: [id])
  schoolId  String
  role      String    // directeur, président, etc.
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([schoolId])
  @@index([role])
}

// Modèle pour les plans d'abonnement
model Plan {
  id          String    @id @default(cuid())
  name        String
  description String
  price       Float
  currency    String    // USD, EUR, etc.
  duration    Int       // en jours
  features    Json      // fonctionnalités incluses
  status      String    // active, inactive
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([status])
  @@index([name])
}

// Modèle pour les abonnements
model Subscription {
  id          String    @id @default(cuid())
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String
  plan        Plan      @relation(fields: [planId], references: [id])
  planId      String
  status      String    // active, expired, cancelled
  startDate   DateTime
  endDate     DateTime?
  payment     Payment?  @relation(fields: [paymentId], references: [id])
  paymentId   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([schoolId])
  @@index([planId])
  @@index([status])
  @@index([startDate])
  @@index([endDate])
}

// Modèle pour les absences
model Absence {
  id          String    @id @default(cuid())
  student     Student   @relation(fields: [studentId], references: [id])
  studentId   String
  subject     Subject?  @relation(fields: [subjectId], references: [id])
  subjectId   String?
  date        DateTime
  type        String    // justified, unjustified, sick
  reason      String?
  status      String    // pending, approved, rejected
  approvedBy  User?     @relation(fields: [approvedById], references: [id])
  approvedById String?
  approvedAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([studentId])
  @@index([subjectId])
  @@index([date])
  @@index([status])
  @@index([approvedById])
}

// Modèle pour les incidents disciplinaires
model DisciplinaryIncident {
  id          String    @id @default(cuid())
  student     Student   @relation(fields: [studentId], references: [id])
  studentId   String
  type        String    // tardiness, absence, misbehavior, etc.
  description String
  date        DateTime
  status      String    // pending, investigated, resolved
  resolvedBy  User?     @relation(fields: [resolvedById], references: [id])
  resolvedById String?

  @@index([status])
  @@index([schoolId])
}

enum AdminRole {
  DIRECTOR
  VICE_DIRECTOR
  SECRETARY
  ACCOUNTANT
  CENSOR
  SUPERVISION
}

model SchoolAdmin {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String
  role        AdminRole
  grades      Grade[] @relation("AdminGrades")
  absences    Absence[] @relation("AdminAbsences")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, schoolId])
}

model Teacher {
  id          String    @id @default(cuid())
  userId      String    @unique
  schoolId    String
  user        User      @relation("UserTeacher", fields: [userId], references: [id])
  school      School    @relation("SchoolTeachers", fields: [schoolId], references: [id])
  subjects    Subject[] @relation("TeacherSubjects")
  schedules   Schedule[] @relation("TeacherSchedules")
  grades      Grade[]   @relation("TeacherGrades")
  absences    Absence[] @relation("TeacherAbsences")
  subscription Subscription? @relation("SubscriptionTeachers", fields: [subscriptionId], references: [id])
  classes     Class[]   @relation("TeacherClasses")
  subscriptionId String?
  teacherId   String? @unique
  payrolls    Payroll[] @relation("EmployeePayrolls")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([schoolId])
  @@index([userId])
  @@index([subscriptionId])
  @@unique([userId], map: "Teacher_userId_unique")
}

model Parent {
  id          String    @id @default(cuid())
  firstName   String
  lastName    String
  email       String?   @unique
  phone       String?
  address     String?
  
  // Relations
  school      School    @relation("SchoolParents", fields: [schoolId], references: [id])
  schoolId    String
  students    Student[] @relation("ParentStudents")
  
  // Subscription
  subscription Subscription? @relation("SubscriptionParents", fields: [subscriptionId], references: [id])
  subscriptionId String?
  
  // User relation (one-to-one)
  user        User?     @relation("UserParent", fields: [userId], references: [id])
  userId      String?    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([schoolId, email])
  @@unique([schoolId, phone])
  @@index([subscriptionId])
  @@index([userId])
}

model Student {
  id              String    @id @default(cuid())
  firstName       String
  lastName        String
  email           String?   @unique
  phone           String?
  birthDate       DateTime
  gender          String
  address         String?
  city            String?
  postalCode      String?
  country         String?   @default("France")
  
  // Relations avec l'école
  school          School    @relation("SchoolStudents", fields: [schoolId], references: [id])
  schoolId        String
  
  // Scolarité
  classId         String?
  class           Class?    @relation("StudentClass", fields: [classId], references: [id])
  enrollmentDate  DateTime  @default(now())
  status          String    @default("active") // active, inactive, graduated, transferred, expelled
  studentId       String?   @unique(map: "Student_studentId_key")
  
  // Informations médicales
  medicalInfo     String?
  allergies       String?
  emergencyContactName String
  emergencyContactPhone String
  emergencyContactRelationship String
  emergencyContactAddress String?
  
  // Documents
  documents       StudentDocument[]
  
  // Relations avec les utilisateurs
  userId          String    @unique
  user            User      @relation("UserStudent", fields: [userId], references: [id])
  
  // Relations avec les parents
  parent          Parent?   @relation("StudentParent", fields: [parentId], references: [id])
  parentId        String?
  
  // Relations avec les notes et absences
  grades          Grade[]
  absences        Absence[]
  
  // Timestamps
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([email])
  @@index([phone])
  @@index([classId])
  @@index([schoolId])
  @@index([status])
  @@index([userId])
  @@index([parentId])
  @@index([emergencyContactPhone])
  @@unique([studentId])

  scheduleEntries ScheduleEntry[] @relation("StudentScheduleEntries")
}

model StudentDocument {
  id          String    @id @default(cuid())
  title       String
  description String?
  type        String    // academic, medical, administrative, etc.
  fileUrl     String
  student     Student   @relation(fields: [studentId], references: [id])
  studentId   String
  uploadedBy  User      @relation("UploadedDocuments", fields: [uploadedById], references: [id])
  uploadedById String
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String
  status      String    @default("ACTIVE")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([studentId])
  @@index([uploadedById])
  @@index([schoolId])
  @@index([type])
  @@index([status])
}

model Class {
  id          String    @id @default(cuid())
  name        String
  grade       String
  level       String?   // Niveau: 6ème, 5ème, etc.
  section     String?   // Section: A, B, C, etc.
  academicYear String   // 2023-2024
  
  // Relations
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String
  teacher     Teacher?  @relation("TeacherClass", fields: [teacherId], references: [id])
  teacherId   String?   @unique
  subjects    Subject[] @relation("ClassSubjects")
  students    Student[] @relation("StudentClass")
  schedules   Schedule[] @relation("ClassSchedules")
  
  // Capacité et effectif
  capacity    Int?
  
  // Métadonnées
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([schoolId, name])
  @@index([schoolId])
  @@index([teacherId])

  fromScheduleEntries ScheduleEntry[] @relation("FromClass")

  toScheduleEntries ScheduleEntry[] @relation("ToClass")
}

model Subject {
  id          String    @id @default(cuid())
  name        String
  code        String    // Code unique pour la matière
  description String?
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String
  
  // Relations
  classes     Class[]   @relation("ClassSubjects") // Relation many-to-many avec Class
  grades      Grade[]   @relation("SubjectGrades") // Notes pour cette matière
  schedules   Schedule[] @relation("SubjectSchedules") // Emplois du temps pour cette matière
  absences    Absence[] @relation("SubjectAbsences") // Absences pour cette matière
  teachers    Teacher[] @relation("TeacherSubjects") // Enseignants qui enseignent cette matière
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([schoolId, name])
  @@index([schoolId])
}



model Schedule {
  id          String    @id @default(cuid())
  day         String
  startTime   DateTime
  endTime     DateTime
  class       Class     @relation("ScheduleClass", fields: [classId], references: [id])
  classId     String
  subject     Subject   @relation("ScheduleSubject", fields: [subjectId], references: [id])
  subjectId   String
  teacher     Teacher   @relation("ScheduleTeacher", fields: [teacherId], references: [id])
  teacherId   String
  school      School    @relation("SchoolSchedules", fields: [schoolId], references: [id])
  schoolId    String
  room        Room?     @relation("RoomSchedules", fields: [roomId], references: [id])
  roomId      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([classId, day, startTime])
  @@index([classId])
  @@index([subjectId])
  @@index([teacherId])
  @@index([roomId])
}

model Grade {
  subject     Subject   @relation(fields: [subjectId], references: [id])
  subjectId   String
  teacher     Teacher   @relation(fields: [teacherId], references: [id])
  teacherId   String
  student     Student   @relation(fields: [studentId], references: [id])
  studentId   String
  trimester   String    // T1, T2, T3
  academicYear String   // Année scolaire
  type         String    // EM1, EM2, EC, DS1, DS2, etc.
  coefficient  Float?
  score        Float
  plan        Plan?     @relation("PlanGrades", fields: [planId], references: [id])
  planId      String?
  subscription Subscription? @relation("SubscriptionGrades", fields: [subscriptionId], references: [id])
  subscriptionId String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([subjectId])
  @@index([teacherId])
  @@index([studentId])
  @@index([trimester])
  @@index([academicYear])
  @@index([type])
  @@unique([studentId, subjectId, trimester, academicYear, type], name: "unique_grade")
  @@index([subscriptionId])
}

model ClassCouncil {
  id          String    @id @default(cuid())
  class       Class     @relation(fields: [classId], references: [id])
  classId     String
  trimester   String    // T1, T2, T3
  academicYear String   // Année scolaire
  date        DateTime
  attendance  Json      // { present: number, absent: number, total: number }
  average     Float     // Moyenne de classe
  successRate Float     // Taux de réussite
  decisions   Json      // { admitted: number, warning: number, retention: number, exclusion: number }
  minutes     String?   // PV du conseil
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([classId])
  @@index([trimester])
  @@index([academicYear])
}

model FeeType {
  id          String    @id @default(cuid())
  name        String    // Ex: "Frais d'inscription", "Frais de scolarité"
  description String?
  code        String    // Code unique pour référence
  amount      Float     // Montant en unité locale
  isRecurring Boolean   @default(false)  // Si c'est un frais récurrent
  recurringPeriod String? // "mensuel", "trimestriel", "annuel"
  schoolId    String    @unique
  school      School    @relation(fields: [schoolId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([schoolId])

  configurations FeeConfiguration[]

  invoiceItems InvoiceItem[]
}

// Modèles pour le planning
model Break {
  id          String    @id @default(cuid())
  name        String
  type        String    // recreation, break, lunch
  startTime   String
  endTime     String
  duration    Int
  levels      String[]
  schoolId    String
  school      School    @relation(fields: [schoolId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([schoolId])
}

model WorkHours {
  id          String    @id @default(cuid())
  schoolId    String    @unique
  school      School    @relation(fields: [schoolId], references: [id])
  startTime   String
  endTime     String
  lunchBreakStart String
  lunchBreakEnd   String
  courseDuration  Int
  breakBetweenCourses Int
  workDays      Int[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model RoomReservation {
  id          String    @id @default(cuid())
  room        Room      @relation(fields: [roomId], references: [id])
  roomId      String
  startTime   DateTime
  endTime     DateTime
  purpose     String
  status      String    // pending, approved, rejected
  createdBy   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([roomId])
}

model ScheduleEntry {
  id          String    @id @default(cuid())
  student     Student   @relation(fields: [studentId], references: [id])
  studentId   String
  fromClass   Class     @relation("FromClass", fields: [fromClassId], references: [id])
  fromClassId String
  toClass     Class     @relation("ToClass", fields: [toClassId], references: [id])
  toClassId   String
  date        DateTime
  reason      String?
  status      String    // pending, approved, rejected
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([studentId])
  @@index([fromClassId])
  @@index([toClassId])
  @@index([status])
  @@index([schoolId])
  @@index([date])
}

model FeeConfiguration {
  id          String    @id @default(cuid())
  feeType     FeeType   @relation(fields: [feeTypeId], references: [id])
  feeTypeId   String
  classLevel  String?   // Niveau de classe (optionnel)
  className   String?   // Classe spécifique (optionnel)
  academicYear String   // Année scolaire (ex: "2024-2025")
  amount      Float     // Montant du frais
  dueDate     DateTime? // Date d'échéance (optionnel)
  isActive    Boolean   @default(true)
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([feeTypeId])
  @@index([schoolId])
  @@index([academicYear])
  @@unique([feeTypeId, classLevel, className, academicYear], name: "unique_fee_configuration")
}

model ClosingDay {
  id              String    @id @default(cuid())
  school          School    @relation(fields: [schoolId], references: [id])
  schoolId        String
  closingDate     DateTime  @default(now())
  openingBalance  Float     // Solde d'ouverture
  closingBalance  Float     // Solde de clôture
  totalIncome     Float     // Total des entrées
  totalExpenses   Float     // Total des sorties
  expectedBalance Float     // Solde attendu (calculé)
  discrepancy     Float     // Écart (positif ou négatif)
  status          String    // OPEN, CLOSED, RECONCILED
  notes           String?
  
  // Détails des espèces
  cashCount       Json?     // Détail du comptage des espèces
  
  // Relations
  createdBy       User      @relation(fields: [createdById], references: [id])
  createdById     String
  closedBy        User?     @relation("ClosingDayClosedBy", fields: [closedById], references: [id])
  closedById      String?
  closedAt        DateTime?
  
  // Paiements associés
  payments        Payment[]
  
  // Timestamps
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([schoolId])
  @@index([closingDate])
  @@index([status])
  @@index([createdById])
  @@index([closedById])
}

model Invoice {
  id          String    @id @default(cuid())
  invoiceNumber String   @unique
  student     Student   @relation(fields: [studentId], references: [id])
  studentId   String
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String
  academicYear String   // Année scolaire
  issueDate   DateTime  @default(now())
  dueDate     DateTime
  status      String    // DRAFT, SENT, PAID, OVERDUE, CANCELLED
  subtotal    Float
  tax         Float     @default(0)
  discount    Float     @default(0)
  total       Float
  notes       String?
  items       InvoiceItem[]
  payments    Payment[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([studentId])
  @@index([schoolId])
  @@index([status])
  @@index([issueDate])
  @@index([dueDate])
}

model InvoiceItem {
  id          String    @id @default(cuid())
  invoice     Invoice   @relation(fields: [invoiceId], references: [id])
  invoiceId   String
  feeType     FeeType   @relation(fields: [feeTypeId], references: [id])
  feeTypeId   String
  description String
  quantity    Float     @default(1)
  unitPrice   Float
  amount      Float
  
  @@index([invoiceId])
  @@index([feeTypeId])
}