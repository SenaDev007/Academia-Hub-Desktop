import React, { useState } from 'react';
import { 
  PlusCircle, 
  Pencil, 
  Trash2, 
  Eye, 
  Save, 
  Download,
  FileText,
  FileCheck,
  FileSignature,
  FileDigit,
  FileBarChart
} from 'lucide-react';

interface HeaderConfig {
  id: string;
  name: string;
  type: 'bulletin' | 'certificat' | 'facture' | 'reçu' | 'attestation' | 'convocation';
  logoLeft?: string;
  logoRight?: string;
  schoolName: string;
  schoolAddress: string;
  schoolPhone: string;
  schoolEmail: string;
  schoolWebsite?: string;
  academicYear: string;
  slogan?: string;
  additionalText?: string;
}

interface FooterConfig {
  id: string;
  name: string;
  type: 'bulletin' | 'certificat' | 'facture' | 'reçu' | 'attestation' | 'convocation';
  directorSignature?: string;
  directorName: string;
  directorTitle: string;
  legalNotice?: string;
  contactInfo?: string;
  qrCode?: boolean;
  date?: boolean;
  pageNumber?: boolean;
}

interface WatermarkConfig {
  id: string;
  name: string;
  type: 'bulletin' | 'certificat' | 'facture' | 'reçu' | 'attestation' | 'convocation';
  enabled: boolean;
  watermarkType: 'text' | 'image';
  text?: string;
  image?: string;
  opacity: number;
  position: 'center' | 'diagonal' | 'horizontal';
}

const DocumentHeaderFooterConfig: React.FC = () => {
  const [activeTab, setActiveTab] = useState<'headers' | 'footers' | 'watermarks'>('headers');
  const [selectedType, setSelectedType] = useState<string>('all');
  const [headers, setHeaders] = useState<HeaderConfig[]>([
    {
      id: '1',
      name: 'En-tête Bulletin',
      type: 'bulletin',
      logoLeft: '',
      logoRight: '',
      schoolName: 'École Primaire Exemple',
      schoolAddress: '123 Rue de l\'Éducation, Cotonou, Bénin',
      schoolPhone: '+229 21 23 45 67',
      schoolEmail: 'contact@ecole-exemple.bj',
      schoolWebsite: 'www.ecole-exemple.bj',
      academicYear: '2023-2024',
      slogan: 'Excellence et Discipline'
    }
  ]);

  const [footers, setFooters] = useState<FooterConfig[]>([
    {
      id: '1',
      name: 'Pied de page Bulletin',
      type: 'bulletin',
      directorName: 'M. Jean Dupont',
      directorTitle: 'Directeur',
      legalNotice: 'Document officiel - Ne pas reproduire',
      contactInfo: 'Tél: +229 21 23 45 67 | Email: contact@ecole-exemple.bj',
      qrCode: true,
      date: true,
      pageNumber: true
    }
  ]);

  const [watermarks, setWatermarks] = useState<WatermarkConfig[]>([
    {
      id: '1',
      name: 'Filigrane Bulletin',
      type: 'bulletin',
      enabled: false,
      watermarkType: 'text',
      text: 'CONFIDENTIEL',
      opacity: 0.3,
      position: 'diagonal'
    }
  ]);

  const [editingHeader, setEditingHeader] = useState<HeaderConfig | null>(null);
  const [editingFooter, setEditingFooter] = useState<FooterConfig | null>(null);
  const [editingWatermark, setEditingWatermark] = useState<WatermarkConfig | null>(null);
  const [previewMode, setPreviewMode] = useState(false);

  const documentTypes = [
    { value: 'bulletin', label: 'Bulletin', icon: <FileDigit className="w-4 h-4 inline mr-2" /> },
    { value: 'certificat', label: 'Certificat', icon: <FileCheck className="w-4 h-4 inline mr-2" /> },
    { value: 'facture', label: 'Facture', icon: <FileText className="w-4 h-4 inline mr-2" /> },
    { value: 'reçu', label: 'Reçu', icon: <FileSignature className="w-4 h-4 inline mr-2" /> },
    { value: 'attestation', label: 'Attestation', icon: <FileText className="w-4 h-4 inline mr-2" /> },
    { value: 'convocation', label: 'Convocation', icon: <Download className="w-4 h-4 inline mr-2" /> }
  ];

  const handleSaveHeader = (header: HeaderConfig): void => {
    if (header.id) {
      setHeaders(headers.map(h => h.id === header.id ? header : h));
    } else {
      setHeaders([...headers, { ...header, id: Date.now().toString() }]);
    }
    setEditingHeader(null);
  };

  const handleSaveFooter = (footer: FooterConfig): void => {
    if (footer.id) {
      setFooters(footers.map(f => f.id === footer.id ? footer : f));
    } else {
      setFooters([...footers, { ...footer, id: Date.now().toString() }]);
    }
    setEditingFooter(null);
  };

  const handleSaveWatermark = (watermark: WatermarkConfig): void => {
    if (watermark.id) {
      setWatermarks(watermarks.map(w => w.id === watermark.id ? watermark : w));
    } else {
      setWatermarks([...watermarks, { ...watermark, id: Date.now().toString() }]);
    }
    setEditingWatermark(null);
  };

  const HeaderForm = ({ header, onSave, onCancel }: { header: HeaderConfig | null, onSave: (h: HeaderConfig) => void, onCancel: () => void }) => {
    const [formData, setFormData] = useState<HeaderConfig>(header || {
      id: '',
      name: '',
      type: 'bulletin',
      logoLeft: '',
      logoRight: '',
      schoolName: '',
      schoolAddress: '',
      schoolPhone: '',
      schoolEmail: '',
      academicYear: '',
      slogan: '',
      additionalText: ''
    });

    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div className="bg-white rounded-xl p-6 w-full max-w-4xl max-h-[90vh] overflow-y-auto">
          <h3 className="text-xl font-semibold mb-4">Configuration de l'en-tête</h3>
          
          <div className="grid md:grid-cols-2 gap-6">
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Nom de la configuration</label>
                <input
                  type="text"
                  value={formData.name}
                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                  placeholder="Ex: En-tête Bulletin 2024"
                />
              </div>

              <div>
                <label htmlFor="documentType" className="block text-sm font-medium text-gray-700 mb-1">Type de document</label>
                <select
                  id="documentType"
                  value={formData.type}
                  onChange={(e) => setFormData({ ...formData, type: e.target.value as 'bulletin' | 'certificat' | 'facture' | 'reçu' | 'attestation' | 'convocation' })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                  aria-label="Sélectionnez le type de document"
                >
                  {documentTypes.map(type => (
                    <option key={type.value} value={type.value}>{type.label}</option>
                  ))}
                </select>
              </div>

              <div>
                <label htmlFor="schoolName" className="block text-sm font-medium text-gray-700 mb-1">Nom de l'établissement</label>
                <input
                  id="schoolName"
                  type="text"
                  value={formData.schoolName}
                  onChange={(e) => setFormData({ ...formData, schoolName: e.target.value })}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                  aria-label="Nom de l'école"
                  placeholder="Entrez le nom de l'école"
                />
              </div>

              <div>
                <label htmlFor="schoolAddress" className="block text-sm font-medium text-gray-700 mb-1">Adresse de l'école</label>
                <textarea
                  id="schoolAddress"
                  value={formData.schoolAddress}
                  onChange={(e) => setFormData({ ...formData, schoolAddress: e.target.value })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                  rows={3}
                  aria-required="true"
                  placeholder="Entrez l'adresse complète de l'école"
                />
              </div>

              <div>
                <label htmlFor="schoolPhone" className="block text-sm font-medium text-gray-700 mb-1">Téléphone</label>
                <input
                  id="schoolPhone"
                  type="tel"
                  value={formData.schoolPhone}
                  onChange={(e) => setFormData({ ...formData, schoolPhone: e.target.value })}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                  aria-label="Téléphone de l'école"
                  placeholder="Entrez le numéro de téléphone"
                  title="Numéro de téléphone de l'école"
                />
              </div>

              <div>
                <label htmlFor="schoolEmail" className="block text-sm font-medium text-gray-700 mb-1">Email</label>
                <input
                  id="schoolEmail"
                  type="email"
                  value={formData.schoolEmail}
                  onChange={(e) => setFormData({ ...formData, schoolEmail: e.target.value })}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                  aria-label="Email de l'école"
                  placeholder="Entrez l'email de l'école"
                  title="Adresse email de l'école"
                />
              </div>
            </div>

            <div className="space-y-4">
              <div>
                <label htmlFor="schoolWebsite" className="block text-sm font-medium text-gray-700 mb-1">Site web (optionnel)</label>
                <input
                  id="schoolWebsite"
                  type="url"
                  value={formData.schoolWebsite || ''}
                  onChange={(e) => setFormData({ ...formData, schoolWebsite: e.target.value })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                  placeholder="https://exemple.com"
                  aria-describedby="websiteHelp"
                />
                <p id="websiteHelp" className="mt-1 text-xs text-gray-500">Laissez vide si non applicable</p>
              </div>

              <div>
                <label htmlFor="academicYear" className="block text-sm font-medium text-gray-700 mb-1">Année scolaire</label>
                <input
                  id="academicYear"
                  type="text"
                  value={formData.academicYear}
                  onChange={(e) => setFormData({ ...formData, academicYear: e.target.value })}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                  placeholder="2023-2024"
                  aria-label="Année scolaire"
                  title="Année scolaire au format AAAA-AAAA"
                />
              </div>

              <div>
                <label htmlFor="slogan" className="block text-sm font-medium text-gray-700 mb-1">Slogan</label>
                <input
                  id="slogan"
                  type="text"
                  value={formData.slogan || ''}
                  onChange={(e) => setFormData({ ...formData, slogan: e.target.value })}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                  aria-label="Slogan de l'école"
                  placeholder="Entrez un slogan pour l'école"
                  title="Slogan de l'école"
                />
              </div>

              <div>
                <label htmlFor="additionalText" className="block text-sm font-medium text-gray-700 mb-1">Texte supplémentaire (optionnel)</label>
                <textarea
                  id="additionalText"
                  value={formData.additionalText || ''}
                  onChange={(e) => setFormData({ ...formData, additionalText: e.target.value })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                  rows={3}
                  placeholder="Texte supplémentaire ou mentions légales"
                  aria-describedby="additionalTextHelp"
                />
                <p id="additionalTextHelp" className="mt-1 text-xs text-gray-500">Ce texte apparaîtra sous l'en-tête du document</p>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Logo</label>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label htmlFor="logoLeft" className="block text-sm font-medium text-gray-700 mb-1">Logo gauche</label>
                    <div className="mt-1 flex items-center space-x-3">
                      <input
                        id="logoLeft"
                        type="file"
                        accept="image/*"
                        onChange={(e) => {
                          const file = e.target.files?.[0];
                          if (file) {
                            const reader = new FileReader();
                            reader.onload = (e) => {
                              setFormData({ ...formData, logoLeft: e.target?.result as string });
                            };
                            reader.readAsDataURL(file);
                          }
                        }}
                        className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-medium file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
                        aria-label="Logo gauche de l'établissement"
                        title="Sélectionner le logo à afficher à gauche de l'en-tête"
                      />
                      {formData.logoLeft && (
                        <img 
                          src={formData.logoLeft} 
                          alt="Logo gauche" 
                          className="h-12 w-12 object-contain rounded border border-gray-300"
                        />
                      )}
                    </div>
                  </div>

                  <div>
                    <label htmlFor="logoRight" className="block text-sm font-medium text-gray-700 mb-1">Logo droit</label>
                    <div className="mt-1 flex items-center space-x-3">
                      <input
                        id="logoRight"
                        type="file"
                        accept="image/*"
                        onChange={(e) => {
                          const file = e.target.files?.[0];
                          if (file) {
                            const reader = new FileReader();
                            reader.onload = (e) => {
                              setFormData({ ...formData, logoRight: e.target?.result as string });
                            };
                            reader.readAsDataURL(file);
                          }
                        }}
                        className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-medium file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
                        aria-label="Logo droit de l'établissement"
                        title="Sélectionner le logo à afficher à droite de l'en-tête"
                      />
                      {formData.logoRight && (
                        <img 
                          src={formData.logoRight} 
                          alt="Logo droit" 
                          className="h-12 w-12 object-contain rounded border border-gray-300"
                        />
                      )}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div className="flex justify-end space-x-3 mt-6">
            <button
              onClick={onCancel}
              className="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50"
            >
              Annuler
            </button>
            <button
              onClick={() => onSave(formData)}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
            >
              <Save className="w-4 h-4 inline mr-2" />
              Enregistrer
            </button>
          </div>
        </div>
      </div>
    );
  };

  const FooterForm = ({ footer, onSave, onCancel }: { footer: FooterConfig | null, onSave: (f: FooterConfig) => void, onCancel: () => void }) => {
    const [formData, setFormData] = useState<FooterConfig>(footer || {
      id: '',
      name: '',
      type: 'bulletin',
      directorName: '',
      directorTitle: '',
      legalNotice: '',
      contactInfo: '',
      qrCode: false,
      date: true,
      pageNumber: true
    });

    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div className="bg-white rounded-xl p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
          <h3 className="text-xl font-semibold mb-4">Configuration du pied de page</h3>
          
          <div className="space-y-4">
            <div>
              <label htmlFor="footerName" className="block text-sm font-medium text-gray-700 mb-1">Nom de la configuration</label>
              <input
                id="footerName"
                type="text"
                value={formData.name}
                onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                aria-label="Nom de la configuration"
                placeholder="Entrez un nom pour cette configuration"
                title="Nom de la configuration du pied de page"
              />
            </div>

            <div>
              <label htmlFor="documentType" className="block text-sm font-medium text-gray-700 mb-1">Type de document</label>
              <select
                id="documentType"
                value={formData.type}
                onChange={(e) => setFormData({ ...formData, type: e.target.value as 'bulletin' | 'certificat' | 'facture' | 'reçu' | 'attestation' | 'convocation' })}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                aria-label="Sélectionnez le type de document"
              >
                <option value="all">Tous les types</option>
                {documentTypes.map(type => (
                  <option key={type.value} value={type.value}>
                    {type.label}
                  </option>
                ))}
              </select>
            </div>

            <div>
              <label htmlFor="directorName" className="block text-sm font-medium text-gray-700 mb-1">Nom du directeur</label>
              <input
                id="directorName"
                type="text"
                value={formData.directorName}
                onChange={(e) => setFormData({ ...formData, directorName: e.target.value })}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                aria-label="Nom du directeur"
                placeholder="Entrez le nom du directeur"
                title="Nom complet du directeur de l'établissement"
              />
            </div>

            <div>
              <label htmlFor="directorTitle" className="block text-sm font-medium text-gray-700 mb-1">Titre du directeur</label>
              <input
                id="directorTitle"
                type="text"
                value={formData.directorTitle}
                onChange={(e) => setFormData({ ...formData, directorTitle: e.target.value })}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                aria-label="Titre du directeur"
                placeholder="Entrez le titre du directeur"
                title="Titre ou fonction du directeur (ex: Directeur, Principal, etc.)"
              />
            </div>

            <div>
              <label htmlFor="legalNotice" className="block text-sm font-medium text-gray-700 mb-1">Mention légale</label>
              <textarea
                id="legalNotice"
                value={formData.legalNotice || ''}
                onChange={(e) => setFormData({ ...formData, legalNotice: e.target.value })}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                rows={3}
                placeholder="Mentions légales ou informations complémentaires"
                aria-label="Mentions légales"
                title="Mentions légales à afficher dans le pied de page"
              />
            </div>

            <div>
              <label htmlFor="contactInfo" className="block text-sm font-medium text-gray-700 mb-1">Informations de contact</label>
              <textarea
                id="contactInfo"
                value={formData.contactInfo || ''}
                onChange={(e) => setFormData({ ...formData, contactInfo: e.target.value })}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                rows={2}
                placeholder="Informations de contact pour les questions"
                aria-label="Coordonnées de contact"
                title="Informations de contact pour les questions ou réclamations"
              />
            </div>

            <fieldset className="space-y-3">
              <legend className="block text-sm font-medium text-gray-700 mb-2">Options d'affichage</legend>
              
              <div className="flex items-center">
                <input
                  id="qrCodeCheckbox"
                  type="checkbox"
                  checked={formData.qrCode}
                  onChange={(e) => setFormData({ ...formData, qrCode: e.target.checked })}
                  className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                  aria-describedby="qrCodeHelp"
                />
                <label htmlFor="qrCodeCheckbox" className="ml-2 text-sm text-gray-700">
                  Inclure un QR code de vérification
                </label>
                <p id="qrCodeHelp" className="sr-only">Activez pour ajouter un QR code de vérification dans le pied de page</p>
              </div>

              <div className="flex items-center">
                <input
                  id="dateCheckbox"
                  type="checkbox"
                  checked={formData.date}
                  onChange={(e) => setFormData({ ...formData, date: e.target.checked })}
                  className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                  aria-describedby="dateHelp"
                />
                <label htmlFor="dateCheckbox" className="ml-2 text-sm text-gray-700">
                  Afficher la date d'édition
                </label>
                <p id="dateHelp" className="sr-only">Affiche automatiquement la date du jour dans le pied de page</p>
              </div>

              <div className="flex items-center">
                <input
                  id="pageNumberCheckbox"
                  type="checkbox"
                  checked={formData.pageNumber}
                  onChange={(e) => setFormData({ ...formData, pageNumber: e.target.checked })}
                  className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                  aria-describedby="pageNumberHelp"
                />
                <label htmlFor="pageNumberCheckbox" className="ml-2 text-sm text-gray-700">
                  Afficher le numéro de page
                </label>
                <p id="pageNumberHelp" className="sr-only">Affiche le numéro de page en bas de chaque page</p>
              </div>
            </fieldset>
          </div>

          <div className="flex justify-end space-x-3 mt-6">
            <button
              onClick={onCancel}
              className="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50"
            >
              Annuler
            </button>
            <button
              onClick={() => onSave(formData)}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
            >
              <Save className="w-4 h-4 inline mr-2" />
              Enregistrer
            </button>
          </div>
        </div>
      </div>
    );
  };

  const filteredItems = activeTab === 'headers' 
    ? (selectedType === 'all' 
        ? headers 
        : headers.filter(h => h.type === selectedType))
    : (selectedType === 'all' 
        ? footers 
        : footers.filter(f => f.type === selectedType));

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          </div>
          <button
            onClick={() => {
              if (activeTab === 'headers') {
                setEditingHeader({} as HeaderConfig);
              } else if (activeTab === 'footers') {
                setEditingFooter({} as FooterConfig);
              } else {
                setEditingWatermark({} as WatermarkConfig);
              }
            }}
            className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center"
          >
            <PlusCircle className="w-4 h-4 mr-2" />
            Nouvelle configuration
          </button>
        </div>

        {/* Liste des configurations */}
        <div className="grid gap-4">
          {filteredItems.map((item) => (
            <div key={item.id} className="border rounded-lg p-4 hover:shadow-md transition-shadow">
              <div className="flex justify-between items-start">
                <div>
                  <h3 className="font-semibold text-gray-900">{item.name}</h3>
                  <p className="text-sm text-gray-600">Type: {item.type}</p>
                  {activeTab === 'watermarks' && (
                    <div className="mt-1">
                      <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                        (item as WatermarkConfig).enabled ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
                      }`}>
                        {(item as WatermarkConfig).enabled ? 'Activé' : 'Désactivé'}
                      </span>
                      <span className="ml-2 text-xs text-gray-500">
                        {(item as WatermarkConfig).watermarkType === 'text' ? 
                          (item as WatermarkConfig).text : 'Image'}
                      </span>
                    </div>
                  )}
                </div>
                <div className="flex space-x-2">
                  <button
                    onClick={() => setPreviewMode(true)}
                    className="text-gray-600 hover:text-gray-900 p-1"
                    title="Aperçu"
                  >
                    <Eye className="w-4 h-4" />
                  </button>
                  <button
                    onClick={() => {
                      if (activeTab === 'headers') {
                        setEditingHeader(item as HeaderConfig);
                      } else if (activeTab === 'footers') {
                        setEditingFooter(item as FooterConfig);
                      } else {
                        setEditingWatermark(item as WatermarkConfig);
                      }
                    }}
                    className="text-blue-600 hover:text-blue-900 p-1"
                    title="Modifier"
                  >
                    <Pencil className="w-4 h-4" />
                  </button>
                  <button
                    onClick={() => {
                      if (activeTab === 'headers') {
                        setHeaders(headers.filter(h => h.id !== item.id));
                      } else if (activeTab === 'footers') {
                        setFooters(footers.filter(f => f.id !== item.id));
                      } else {
                        setWatermarks(watermarks.filter(w => w.id !== item.id));
                      }
                    }}
                    className="text-red-600 hover:text-red-900 p-1"
                    title="Supprimer"
                  >
                    <Trash2 className="w-4 h-4" />
                  </button>
                </div>
                      </div>
                    )}
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>
      </div>

      {editingHeader && (
        <HeaderForm
          header={editingHeader}
          onSave={handleSaveHeader}
          onCancel={() => setEditingHeader(null)}
        />
      )}

      {editingFooter && (
        <FooterForm
          footer={editingFooter}
          onSave={handleSaveFooter}
          onCancel={() => setEditingFooter(null)}
        />
      )}
    </div>
  const WatermarkForm = ({ watermark, onSave, onCancel }: { watermark: WatermarkConfig | null, onSave: (w: WatermarkConfig) => void, onCancel: () => void }) => {
    const [formData, setFormData] = useState<WatermarkConfig>(watermark || {
      id: '',
      name: '',
      type: 'bulletin',
      enabled: true,
      watermarkType: 'text',
      text: '',
      image: '',
      opacity: 0.3,
      position: 'center'
    });

    const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
      const file = e.target.files?.[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = (event) => {
          setFormData({ ...formData, image: event.target?.result as string });
        };
        reader.readAsDataURL(file);
      }
    };

    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div className="bg-white rounded-xl p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
          <h3 className="text-xl font-semibold mb-4">Configuration du filigrane</h3>
          
          <div className="space-y-4">
            <div>
              <label htmlFor="watermarkName" className="block text-sm font-medium text-gray-700 mb-1">
                Nom de la configuration
              </label>
              <input
                id="watermarkName"
                type="text"
                value={formData.name}
                onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                aria-label="Nom de la configuration"
                placeholder="Entrez un nom pour cette configuration"
                title="Nom de la configuration de filigrane"
              />
            </div>

            <div>
              <label htmlFor="watermarkType" className="block text-sm font-medium text-gray-700 mb-1">
                Type de document
              </label>
              <select
                id="watermarkType"
                value={formData.type}
                onChange={(e) => setFormData({ ...formData, type: e.target.value as WatermarkConfig['type'] })}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                aria-label="Type de document"
                title="Type de document pour ce filigrane"
              >
                {documentTypes.map(type => (
                  <option key={type.value} value={type.value}>{type.label}</option>
                ))}
              </select>
            </div>

            <div className="flex items-center">
              <input
                id="watermarkEnabled"
                type="checkbox"
                checked={formData.enabled}
                onChange={(e) => setFormData({ ...formData, enabled: e.target.checked })}
                className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                aria-label="Activer le filigrane"
              />
              <label htmlFor="watermarkEnabled" className="ml-2 block text-sm text-gray-900">
                Activer le filigrane
              </label>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Type de filigrane</label>
              <div className="space-y-2">
                <div className="flex items-center">
                  <input
                    id="textWatermark"
                    type="radio"
                    name="watermarkType"
                    value="text"
                    checked={formData.watermarkType === 'text'}
                    onChange={(e) => setFormData({ ...formData, watermarkType: e.target.value as 'text' | 'image' })}
                    className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300"
                    aria-label="Filigrane texte"
                  />
                  <label htmlFor="textWatermark" className="ml-2 block text-sm text-gray-900">
                    Texte
                  </label>
                </div>
                <div className="flex items-center">
                  <input
                    id="imageWatermark"
                    type="radio"
                    name="watermarkType"
                    value="image"
                    checked={formData.watermarkType === 'image'}
                    onChange={(e) => setFormData({ ...formData, watermarkType: e.target.value as 'text' | 'image' })}
                    className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300"
                    aria-label="Filigrane image"
                  />
                  <label htmlFor="imageWatermark" className="ml-2 block text-sm text-gray-900">
                    Image
                  </label>
                </div>
              </div>
            </div>

            {formData.watermarkType === 'text' && (
              <div>
                <label htmlFor="watermarkText" className="block text-sm font-medium text-gray-700 mb-1">
                  Texte du filigrane
                </label>
                <input
                  id="watermarkText"
                  type="text"
                  value={formData.text || ''}
                  onChange={(e) => setFormData({ ...formData, text: e.target.value })}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                  aria-label="Texte du filigrane"
                  placeholder="Ex: CONFIDENTIEL, BROUILLON"
                  title="Texte à afficher comme filigrane"
                />
              </div>
            )}

            {formData.watermarkType === 'image' && (
              <div>
                <label htmlFor="watermarkImage" className="block text-sm font-medium text-gray-700 mb-1">
                  Image du filigrane
                </label>
                <div className="space-y-2">
                  <input
                    id="watermarkImage"
                    type="file"
                    accept="image/*"
                    onChange={handleImageUpload}
                    className="mt-1 block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-medium file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
                    aria-label="Image du filigrane"
                    title="Sélectionner une image pour le filigrane"
                  />
                  {formData.image && (
                    <div className="mt-2">
                      <img 
                        src={formData.image} 
                        alt="Aperçu du filigrane" 
                        className="max-w-xs max-h-32 rounded border border-gray-300"
                      />
                    </div>
                  )}
                </div>
              </div>
            )}

            <div>
              <label htmlFor="watermarkOpacity" className="block text-sm font-medium text-gray-700 mb-1">
                Opacité: {Math.round(formData.opacity * 100)}%
              </label>
              <input
                id="watermarkOpacity"
                type="range"
                min="0.1"
                max="1"
                step="0.1"
                value={formData.opacity}
                onChange={(e) => setFormData({ ...formData, opacity: parseFloat(e.target.value) })}
                className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
                aria-label="Opacité du filigrane"
                title="Ajuster l'opacité du filigrane"
              />
            </div>

            <div>
              <label htmlFor="watermarkPosition" className="block text-sm font-medium text-gray-700 mb-1">
                Position du filigrane
              </label>
              <select
                id="watermarkPosition"
                value={formData.position}
                onChange={(e) => setFormData({ ...formData, position: e.target.value as WatermarkConfig['position'] })}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                aria-label="Position du filigrane"
                title="Position du filigrane sur la page"
              >
                <option value="center">Centre</option>
                <option value="diagonal">Diagonale</option>
                <option value="horizontal">Horizontal</option>
              </select>
            </div>
          </div>

          <div className="flex justify-end space-x-3 mt-6">
            <button
              onClick={onCancel}
              className="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50"
            >
              Annuler
            </button>
            <button
              onClick={() => onSave(formData)}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
            >
              <Save className="w-4 h-4 inline mr-2" />
              Enregistrer
            </button>
          </div>
        </div>
      </div>
    );
  };acité du filigrane"
              />
            </div>

            <div>
              <label htmlFor="watermarkPosition" className="block text-sm font-medium text-gray-700 mb-1">
                Position du filigrane
              </label>
              <select
                id="watermarkPosition"
                value={formData.position}
                onChange={(e) => setFormData({ ...formData, position: e.target.value as WatermarkConfig['position'] })}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                aria-label="Position du filigrane"
                title="Position du filigrane sur la page"
              >
                <option value="center">Centre</option>
                <option value="diagonal">Diagonale</option>
                <option value="horizontal">Horizontal</option>
              </select>
            </div>
          </div>

          <div className="flex justify-end space-x-3 mt-6">
            <button
              onClick={onCancel}
              className="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50"
            >
              Annuler
            </button>
            <button
              onClick={() => onSave(formData)}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
            >
              <Save className="w-4 h-4 inline mr-2" />
              Enregistrer
            </button>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="max-w-7xl mx-auto px-4 py-8">
      <div className="bg-white rounded-xl shadow-lg p-6">
        <h1 className="text-2xl font-bold text-gray-900 mb-6">Configuration des Documents</h1>
        
        {/* Navigation des onglets */}
        <div className="border-b border-gray-200 mb-6">
          <nav className="flex space-x-8">
            <button
              onClick={() => setActiveTab('headers')}
              className={`py-2 px-1 border-b-2 font-medium text-sm ${
                activeTab === 'headers'
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700'
              }`}
            >
              En-têtes
            </button>
            <button
              onClick={() => setActiveTab('footers')}
              className={`py-2 px-1 border-b-2 font-medium text-sm ${
                activeTab === 'footers'
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700'
              }`}
            >
              Pieds de page
            </button>
            <button
              onClick={() => setActiveTab('watermarks')}
              className={`py-2 px-1 border-b-2 font-medium text-sm ${
                activeTab === 'watermarks'
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700'
              }`}
            >
              Filigranes
            </button>
          </nav>
        </div>

        {/* Filtres */}
        <div className="flex justify-between items-center mb-6">
          <div>
            <label htmlFor="documentFilter" className="sr-only">Filtrer par type de document</label>
            <select
              id="documentFilter"
              value={selectedType}
              onChange={(e) => setSelectedType(e.target.value)}
              className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
              aria-label="Filtrer par type de document"
            >
              <option value="all">Tous les types</option>
              {documentTypes.map(type => (
                <option key={type.value} value={type.value}>
                  {type.label}
                </option>
              ))}
            </select>
          </div>

          <button
            onClick={() => {
              if (activeTab === 'headers') {
                setEditingHeader({} as HeaderConfig);
              } else if (activeTab === 'footers') {
                setEditingFooter({} as FooterConfig);
              } else {
                setEditingWatermark({} as WatermarkConfig);
              }
            }}
            className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center"
          >
            <PlusCircle className="w-4 h-4 mr-2" />
            Nouvelle configuration
          </button>
        </div>

        {/* Liste des configurations */}
        <div className="grid gap-4">
          {filteredItems.map((item) => (
            <div key={item.id} className="border rounded-lg p-4 hover:shadow-md transition-shadow">
              <div className="flex justify-between items-start">
                <div>
                  <h3 className="font-semibold text-gray-900">{item.name}</h3>
                  <p className="text-sm text-gray-600">Type: {item.type}</p>
                  {activeTab === 'watermarks' && (
                    <div className="mt-1">
                      <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                        (item as WatermarkConfig).enabled ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
                      }`}>
                        {(item as WatermarkConfig).enabled ? 'Activé' : 'Désactivé'}
                      </span>
                      <span className="ml-2 text-xs text-gray-500">
                        {(item as WatermarkConfig).watermarkType === 'text' ? 
                          (item as WatermarkConfig).text : 'Image'}
                      </span>
                    </div>
                  )}
                </div>
                <div className="flex space-x-2">
                  <button
                    onClick={() => setPreviewMode(true)}
                    className="text-gray-600 hover:text-gray-900 p-1"
                    title="Aperçu"
                  >
                    <Eye className="w-4 h-4" />
                  </button>
                  <button
                    onClick={() => {
                      if (activeTab === 'headers') {
                        setEditingHeader(item as HeaderConfig);
                      } else if (activeTab === 'footers') {
                        setEditingFooter(item as FooterConfig);
                      } else {
                        setEditingWatermark(item as WatermarkConfig);
                      }
                    }}
                    className="text-blue-600 hover:text-blue-900 p-1"
                    title="Modifier"
                  >
                    <Pencil className="w-4 h-4" />
                  </button>
                  <button
                    onClick={() => {
                      if (activeTab === 'headers') {
                        setHeaders(headers.filter(h => h.id !== item.id));
                      } else if (activeTab === 'footers') {
                        setFooters(footers.filter(f => f.id !== item.id));
                      } else {
                        setWatermarks(watermarks.filter(w => w.id !== item.id));
                      }
                    }}
                    className="text-red-600 hover:text-red-900 p-1"
                    title="Supprimer"
                  >
                    <Trash2 className="w-4 h-4" />
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>

        {/* Formulaires d'édition */}
        {editingHeader && (
          <HeaderForm 
            header={editingHeader} 
            onSave={handleSaveHeader} 
            onCancel={() => setEditingHeader(null)} 
          />
        )}
        {editingFooter && (
          <FooterForm 
            footer={editingFooter} 
            onSave={handleSaveFooter} 
            onCancel={() => setEditingFooter(null)} 
          />
        )}
        {editingWatermark && (
          <WatermarkForm 
            watermark={editingWatermark} 
            onSave={handleSaveWatermark} 
            onCancel={() => setEditingWatermark(null)} 
          />
        )}
      </div>
    </div>
  );
};

export default DocumentHeaderFooterConfig;
