generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Plan {
  id            String         @id @default(uuid())
  name          String         @unique
  description   String?
  price         Float
  duration      Int
  features      Json?
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  grades        Grade[]        @relation("PlanGrades")
  schools       School[]
  subscriptions Subscription[] @relation("SchoolPlan")

  @@map("plans")
}

model School {
  id                            String                         @id @default(uuid())
  name                          String
  subdomain                     String                         @unique
  planId                        String
  academicYear                  String
  trimester                     Int                            @default(1)
  settings                      Json?
  status                        String                         @default("active")
  trialEndsAt                   DateTime?
  address                       String?
  email                         String?
  phone                         String?
  logo                          String?
  website                       String?
  description                   String?
  createdAt                     DateTime                       @default(now())
  updatedAt                     DateTime                       @updatedAt
  academicCalendars             AcademicCalendar[]
  academicScheduleEntries       AcademicScheduleEntry[]
  academicScheduleExports       AcademicScheduleExport[]
  academicYears                 AcademicYear[]
  backups                       Backup[]
  breaks                        Break[]
  budgets                       Budget[]
  cahierJournals                CahierJournalEntry[]
  cahierJournalExports          CahierJournalExport[]
  cahierJournalHistories        CahierJournalHistory[]
  cahierJournalNotifications    CahierJournalNotification[]
  cahierJournalTemplates        CahierJournalTemplate[]
  cahierJournalWorkflows        CahierJournalWorkflow[]
  classTransfers                ClassTransfer[]
  classes                       Class[]
  closingDays                   ClosingDay[]
  competenceDomains             CompetenceDomainDescription[]
  competences                   Competence[]
  documentTags                  DocumentTag[]
  documentTemplates             DocumentTemplate[]
  documentVersions              DocumentVersion[]
  documents                     Document[]
  examExports                   ExamExport[]
  examGrades                    ExamGrade[]
  examSessionHistories          ExamSessionHistory[]
  examSessionNotifications      ExamSessionNotification[]
  examSessions                  ExamSession[]
  expenses                      Expense[]
  feeConfigurations             FeeConfiguration[]
  feeTypes                      FeeType[]
  gradeScales                   GradeScale[]
  gradeScalesPrimary            GradeScalePrimary[]
  invoices                      Invoice[]
  loginAttempts                 LoginAttempt[]
  logs                          Log[]
  notifications                 Notification[]
  parents                       Parent[]                       @relation("SchoolParents")
  payments                      Payment[]
  payrollBatches                PayrollBatch[]
  payrollSettings               PayrollSettings[]
  plannings                     AcademicSchedule[]
  academicScheduleNotifications AcademicScheduleNotification[]
  refreshTokens                 RefreshToken[]
  reportTemplates               ReportTemplate[]
  reports                       Report[]
  roomReservations              RoomReservation[]
  rooms                         Room[]
  scheduleEntries               ScheduleEntry[]
  scheduleExports               ScheduleExport[]
  schedules                     Schedule[]
  admins                        SchoolAdmin[]
  promoters                     SchoolPromoter[]
  schoolReports                 SchoolReport[]
  plan                          Plan                           @relation(fields: [planId], references: [id])
  securityLogs                  SecurityLog[]
  schoolSettings                Setting[]
  statistics                    Statistic[]
  studentAverages               StudentAverage[]
  studentDocuments              StudentDocument[]
  students                      Student[]                      @relation("SchoolStudents")
  subjectCoefficients           SubjectCoefficient[]
  subjects                      Subject[]
  subscriptions                 Subscription?                  @relation("SchoolSubscription")
  supportAttachments            SupportAttachment[]
  supportMessages               SupportMessage[]
  supportTickets                SupportTicket[]
  teachers                      Teacher[]                      @relation("SchoolTeachers")
  users                         User[]
  workHours                     WorkHours?

  @@map("schools")
}

model User {
  id                                    String                         @id @default(uuid())
  schoolId                              String
  email                                 String                         @unique
  passwordHash                          String
  role                                  String
  status                                String                         @default("pending")
  firstName                             String?
  lastName                              String?
  phone                                 String?
  avatar                                String?
  lastLoginAt                           DateTime?
  createdAt                             DateTime                       @default(now())
  updatedAt                             DateTime                       @updatedAt
  approvedAbsences                      Absence[] @relation("AbsenceApprovedByUser")
  academicScheduleEntries               AcademicScheduleEntry[]
  academicScheduleExports               AcademicScheduleExport[]
  audits                                Audit[]
  createdCahierJournalEntries           CahierJournalEntry[]           @relation("EntryCreatedBy")
  validatedCahierJournalEntries         CahierJournalEntry[]           @relation("EntryValidatedBy")
  cahierJournalExports                  CahierJournalExport[]
  cahierJournalHistories                CahierJournalHistory[]
  receivedCahierJournalNotifications    CahierJournalNotification[]    @relation("CahierJournalNotificationRecipient")
  sentCahierJournalNotifications        CahierJournalNotification[]    @relation("NotificationSentBy")
  createdCahierJournalTemplates         CahierJournalTemplate[]        @relation("TemplateCreatedBy")
  createdCahierJournalWorkflows         CahierJournalWorkflow[]        @relation("WorkflowCreatedBy")
  approvedClassTransfers                ClassTransfer[]
  closedClosingDays                     ClosingDay[]                   @relation("ClosingDayClosedBy")
  createdClosingDays                    ClosingDay[]                   @relation("ClosingDayCreatedBy")
  resolvedDisciplinaryIncidents         DisciplinaryIncident[]
  documentVersions                      DocumentVersion[]
  uploadedDocuments                     Document[]                     @relation("DocumentUploadedBy")
  examExports                           ExamExport[]
  examGradeHistories                    ExamGradeHistory[]
  examSessionHistories                  ExamSessionHistory[]
  receivedExamSessionNotifications      ExamSessionNotification[]      @relation("ExamSessionNotificationRecipient")
  sentExamSessionNotifications          ExamSessionNotification[]      @relation("ExamSessionNotificationSentBy")
  approvedExpenses                      Expense[]                      @relation("ExpenseApprovedBy")
  createdExpenses                       Expense[]                      @relation("ExpenseCreatedBy")
  grades                                Grade[]                      @relation("UserGrades")
  receivedNotifications                 Notification[]                 @relation("NotificationRecipient")
  sentNotifications                     Notification[]                 @relation("NotificationSender")
  parent                                Parent?                        @relation("UserParent")
  approvedPayments                      Payment[]                      @relation("PaymentApprovedBy")
  createdPayments                       Payment[]                      @relation("PaymentCreatedBy")
  approvedPayrolls                      Payroll[]                      @relation("ApprovedPayrolls")
  createdPayrolls                       Payroll[]                      @relation("CreatedPayrolls")
  approvedPayrollBatches                PayrollBatch[]                 @relation("BatchApprovedBy")
  createdPayrollBatches                 PayrollBatch[]                 @relation("BatchCreatedBy")
  approvedPayrollSettings               PayrollSettings[]              @relation("SettingsApprovedBy")
  createdPayrollSettings                PayrollSettings[]              @relation("SettingsCreatedBy")
  createdAcademicSchedules              AcademicSchedule[]             @relation("AcademicScheduleCreatedBy")
  validatedAcademicSchedules            AcademicSchedule[]             @relation("AcademicScheduleValidatedBy")
  receivedAcademicScheduleNotifications AcademicScheduleNotification[] @relation("AcademicScheduleNotificationRecipient")
  sentAcademicScheduleNotifications     AcademicScheduleNotification[] @relation("AcademicScheduleNotificationSentBy")
  refreshTokens                         RefreshToken[]
  scheduleExports                       ScheduleExport[]
  schoolAdmins                          SchoolAdmin[]
  uploadedSchoolReportAttachments       SchoolReportAttachment[]
  securityLogs                          SecurityLog[]
  uploadedStudentDocuments              StudentDocument[]              @relation("UploadedDocuments")
  student                               Student?                       @relation("UserStudent")
  supportAttachments                    SupportAttachment[]
  supportMessages                       SupportMessage[]
  supportTickets                        SupportTicket[]
  teacher                               Teacher?                       @relation("UserTeacher")
  school                                School                         @relation(fields: [schoolId], references: [id])

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  schoolId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  school    School   @relation(fields: [schoolId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("refresh_tokens")
}

model AcademicYear {
  id          String              @id @default(uuid())
  schoolId    String
  name        String
  startDate   DateTime
  endDate     DateTime
  trimester   Int                 @default(1)
  isCurrent   Boolean             @default(false)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  calendarId  String
  trimesters  AcademicTrimester[]
  calendar    AcademicCalendar    @relation(fields: [calendarId], references: [id])
  school      School              @relation(fields: [schoolId], references: [id])
  enrollments Enrollment[]
  sessions    ExamSession[]

  @@unique([schoolId, name])
  @@map("academic_years")
}

model AcademicCalendar {
  id        String         @id @default(uuid())
  name      String
  startDate DateTime
  endDate   DateTime
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  schoolId  String
  school    School         @relation(fields: [schoolId], references: [id])
  years     AcademicYear[]

  @@unique([name, schoolId])
  @@index([schoolId])
  @@map("academic_calendars")
}

model AcademicTrimester {
  id        String        @id @default(uuid())
  number    Int
  startDate DateTime
  endDate   DateTime
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  yearId    String
  year      AcademicYear  @relation(fields: [yearId], references: [id])
  grades    ExamGrade[]
  sessions  ExamSession[]

  @@unique([number, yearId])
  @@index([yearId])
  @@map("academic_trimesters")
}

model Class {
  id                      String                  @id @default(uuid())
  schoolId                String
  name                    String
  grade                   String
  section                 String?
  level                   String?
  academicYear            String
  capacity                Int?
  teacherId               String?                 @unique
  isActive                Boolean                 @default(true)
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  absences                Absence[]
  academicScheduleEntries AcademicScheduleEntry[]
  cahierJournals          CahierJournalEntry[]
  classTransfersFrom      ClassTransfer[]         @relation("FromClassTransfer")
  classTransfersTo        ClassTransfer[]         @relation("ToClassTransfer")
  school                  School                  @relation(fields: [schoolId], references: [id])
  teacher                 Teacher?                @relation("TeacherClasses", fields: [teacherId], references: [id])
  competences             Competence[]
  enrollments             Enrollment[]
  examGrades              ExamGrade[]
  examSessions            ExamSession[]
  fromScheduleEntries     ScheduleEntry[]         @relation("FromClass")
  toScheduleEntries       ScheduleEntry[]         @relation("ToClass")
  schedules               Schedule[]              @relation("ClassSchedules")
  schoolReports           SchoolReport[]
  studentAverages         StudentAverage[]
  students                Student[]               @relation("StudentClass")
  transfersFrom           TransferRequest[]       @relation("FromClass")
  transfersTo             TransferRequest[]       @relation("ToClass")
  subjects                Subject[]               @relation("ClassSubjects")

  @@unique([schoolId, name, academicYear])
  @@map("classes")
}

model Subject {
  id                      String                  @id @default(uuid())
  schoolId                String
  name                    String
  code                    String
  group                   String?
  domain                  String?
  coefficient             Float                   @default(1)
  level                   String
  description             String?
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  absences                Absence[]               @relation("AbsenceSubject")
  academicScheduleEntries AcademicScheduleEntry[]
  cahierJournals          CahierJournalEntry[]
  competences             Competence[]
  examGrades              ExamGrade[]
  examSessions            ExamSession[]
  grades                  Grade[]                 @relation("SubjectGrades")
  schedules               Schedule[]              @relation("SubjectSchedules")
  schoolReportComments    SchoolReportComment[]
  subjectCoefficients     SubjectCoefficient[]
  school                  School                  @relation(fields: [schoolId], references: [id])
  classes                 Class[]                 @relation("ClassSubjects")
  teachers                Teacher[]               @relation("TeacherSubjects")

  @@unique([schoolId, code])
  @@map("subjects")
}

model Room {
  id           String            @id @default(uuid())
  schoolId     String
  name         String
  capacity     Int?
  type         String
  description  String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  reservations RoomReservation[]
  school       School            @relation(fields: [schoolId], references: [id])
  schedules    Schedule[]        @relation("RoomSchedules")

  @@unique([schoolId, name])
  @@map("rooms")
}

model Schedule {
  id        String           @id @default(uuid())
  schoolId  String
  classId   String
  subjectId String
  teacherId String
  roomId    String?
  day       String
  startTime String
  endTime   String
  isActive  Boolean          @default(true)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  exports   ScheduleExport[]
  class     Class            @relation("ClassSchedules", fields: [classId], references: [id])
  room      Room?            @relation("RoomSchedules", fields: [roomId], references: [id])
  school    School           @relation(fields: [schoolId], references: [id])
  subject   Subject          @relation("SubjectSchedules", fields: [subjectId], references: [id])
  teacher   Teacher          @relation("TeacherSchedules", fields: [teacherId], references: [id])

  @@map("schedules")
}

model Student {
  id                           String                 @id @default(uuid())
  schoolId                     String
  userId                       String                 @unique
  educmasterNumber             String?
  firstName                    String
  lastName                     String
  email                        String?
  phone                        String?
  birthDate                    DateTime?
  gender                       String?
  address                      String?
  city                         String?
  postalCode                   String?
  country                      String                 @default("France")
  classId                      String?
  enrollmentDate               DateTime               @default(now())
  status                       String                 @default("active")
  emergencyContactName         String?
  emergencyContactPhone        String?
  emergencyContactRelationship String?
  emergencyContactAddress      String?
  medicalInfo                  String?
  allergies                    String?
  parentId                     String?
  studentId                    String?                @unique
  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime               @updatedAt
  absences                     Absence[]
  classTransfers               ClassTransfer[]
  competences                  Competence[]
  disciplinaryIncidents        DisciplinaryIncident[]
  enrollments                  Enrollment[]
  examGrades                   ExamGrade[]
  grades                       Grade[] @relation("StudentGrades")
  invoices                     Invoice[]
  payments                     Payment[]
  scheduleEntries              ScheduleEntry[]        @relation("StudentScheduleEntries")
  schoolReports                SchoolReport[]
  averages                     StudentAverage[]
  documents                    StudentDocument[]
  class                        Class?                 @relation("StudentClass", fields: [classId], references: [id])
  parent                       Parent?                @relation("ParentStudents", fields: [parentId], references: [id])
  school                       School                 @relation("SchoolStudents", fields: [schoolId], references: [id])
  user                         User                   @relation("UserStudent", fields: [userId], references: [id])
  transferRequests             TransferRequest[]

  @@unique([schoolId, educmasterNumber])
  @@map("students")
}

model Parent {
  id             String        @id @default(uuid())
  userId         String?       @unique
  firstName      String
  lastName       String
  email          String?
  phone          String?
  address        String?
  schoolId       String
  subscriptionId String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  school         School        @relation("SchoolParents", fields: [schoolId], references: [id])
  subscription   Subscription? @relation("SubscriptionParents", fields: [subscriptionId], references: [id])
  user           User?         @relation("UserParent", fields: [userId], references: [id])
  children       Student[]     @relation("ParentStudents")

  @@unique([schoolId, email])
  @@unique([schoolId, phone])
  @@map("parents")
}

model Teacher {
  id                   String                @id @default(uuid())
  schoolId             String
  userId               String                @unique
  employeeId           String?
  firstName            String
  lastName             String
  email                String?
  phone                String?
  salary               Decimal?
  hireDate             DateTime?
  status               String                @default("active")
  teacherId            String?               @unique
  subscriptionId       String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  approvedAbsences     Absence[]             @relation("AbsenceApprover")
  cahierJournals       CahierJournalEntry[]
  classes              Class?                @relation("TeacherClasses")
  examSessions         ExamSession[]
  grades               Grade[] @relation("TeacherGrades")
  payrolls             Payroll[]             @relation("EmployeePayrolls")
  schedules            Schedule[]            @relation("TeacherSchedules")
  schoolReportComments SchoolReportComment[]
  school               School                @relation("SchoolTeachers", fields: [schoolId], references: [id])
  subscription         Subscription?         @relation("SubscriptionTeachers", fields: [subscriptionId], references: [id])
  user                 User                  @relation("UserTeacher", fields: [userId], references: [id])
  subjects             Subject[]             @relation("TeacherSubjects")

  @@unique([schoolId, employeeId])
  @@map("teachers")
}

model Grade {
  id             String         @id @default(uuid())
  studentId      String
  subjectId      String
  teacherId      String
  trimester      String
  academicYear   String
  type           String
  coefficient    Float
  score          Float
  planId         String?
  subscriptionId String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  history        GradeHistory[]
  plan           Plan?          @relation("PlanGrades", fields: [planId], references: [id])
  student        Student        @relation("StudentGrades", fields: [studentId], references: [id], map: "grade_student_fkey")
  subject        Subject        @relation("SubjectGrades", fields: [subjectId], references: [id], map: "grade_subject_fkey")
  subscription   Subscription?  @relation("SubscriptionGrades", fields: [subscriptionId], references: [id])
  teacher        Teacher        @relation("TeacherGrades", fields: [teacherId], references: [id], map: "grade_teacher_fkey")
  user           User?          @relation("UserGrades", fields: [studentId], references: [id], map: "grade_user_fkey")

  @@map("grades")
}

model GradeHistory {
  id             String   @id @default(uuid())
  gradeId        String
  oldValue       Float?
  oldQualitative String?
  newValue       Float?
  newQualitative String?
  changedBy      String
  reason         String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  grade          Grade    @relation(fields: [gradeId], references: [id])

  @@map("grade_history")
}

model Absence {
  id         String    @id @default(uuid())
  studentId  String
  classId    String
  subjectId  String?
  date       DateTime
  type       String
  reason     String?
  status     String
  approvedBy String?
  approvedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  approver   Teacher?  @relation("AbsenceApprover", fields: [approvedBy], references: [id], map: "absence_approver_fkey")
  class      Class     @relation(fields: [classId], references: [id])
  student    Student   @relation(fields: [studentId], references: [id])
  subject    Subject?  @relation("AbsenceSubject", fields: [subjectId], references: [id], map: "absence_subject_fkey")
  approvedByUser User? @relation("AbsenceApprovedByUser", fields: [approvedBy], references: [id], map: "absence_approved_by_user_fkey")

  @@map("absences")
}

model StudentDocument {
  id           String   @id @default(uuid())
  studentId    String
  title        String
  description  String?
  type         String
  fileUrl      String
  fileName     String
  fileSize     Int
  fileType     String
  uploadedById String
  status       String   @default("ACTIVE")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  schoolId     String
  school       School   @relation(fields: [schoolId], references: [id])
  student      Student  @relation(fields: [studentId], references: [id])
  uploadedBy   User     @relation("UploadedDocuments", fields: [uploadedById], references: [id])

  @@map("student_documents")
}

model Competence {
  id          String    @id @default(uuid())
  schoolId    String
  domain      String
  level       String
  description String
  criteria    String[]
  title       String
  subjectId   String
  gradeId     String
  studentId   String
  classId     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  class       Class     @relation(fields: [classId], references: [id])
  grade       ExamGrade @relation(fields: [gradeId], references: [id])
  school      School    @relation(fields: [schoolId], references: [id])
  student     Student   @relation(fields: [studentId], references: [id])
  subject     Subject   @relation(fields: [subjectId], references: [id])

  @@unique([title, subjectId, studentId])
  @@map("competences")
}

model CompetenceDomainDescription {
  id          String           @id @default(uuid())
  domain      CompetenceDomain
  description String
  criteria    String[]
  schoolId    String
  level       String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  school      School           @relation(fields: [schoolId], references: [id])

  @@unique([domain, schoolId, level])
  @@index([domain, schoolId])
  @@map("competence_domain_descriptions")
}

model GradeScale {
  id             String   @id @default(uuid())
  schoolId       String
  level          String
  minScore       Float
  maxScore       Float
  emoji          String?
  description    String
  observation    String
  recommendation String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  school         School   @relation(fields: [schoolId], references: [id])

  @@unique([level, minScore, maxScore, schoolId])
  @@map("grade_scales")
}

model GradeScalePrimary {
  id             String   @id @default(uuid())
  schoolId       String
  minScore       Float
  maxScore       Float
  emoji          String
  description    String
  observation    String
  recommendation String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  school         School   @relation(fields: [schoolId], references: [id])

  @@unique([minScore, maxScore, schoolId])
  @@map("grade_scales_primary")
}

model ExamSession {
  id             String                    @id @default(uuid())
  schoolId       String
  type           String
  subjectId      String
  classId        String
  teacherId      String
  date           DateTime
  status         String                    @default("PENDING")
  name           String
  description    String?
  startDate      DateTime
  endDate        DateTime
  month          Int
  trimesterId    String
  createdAt      DateTime                  @default(now())
  updatedAt      DateTime                  @updatedAt
  academicYearId String
  exports        ExamExport[]
  grades         ExamGrade[]
  histories      ExamSessionHistory[]
  notifications  ExamSessionNotification[]
  academicYear   AcademicYear              @relation(fields: [academicYearId], references: [id])
  class          Class                     @relation(fields: [classId], references: [id])
  school         School                    @relation(fields: [schoolId], references: [id])
  subject        Subject                   @relation(fields: [subjectId], references: [id])
  teacher        Teacher                   @relation(fields: [teacherId], references: [id])
  trimester      AcademicTrimester         @relation(fields: [trimesterId], references: [id])

  @@unique([name, schoolId])
  @@map("exam_sessions")
}

model ExamGrade {
  id             String             @id @default(uuid())
  value          Float
  qualitative    GradeQualitative?
  mention        GradeMention?
  coef           Float              @default(1)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  studentId      String
  subjectId      String
  classId        String
  schoolId       String
  sessionId      String
  trimesterId    String
  schoolReportId String?
  competences    Competence[]
  history        ExamGradeHistory[]
  class          Class              @relation(fields: [classId], references: [id])
  school         School             @relation(fields: [schoolId], references: [id])
  schoolReport   SchoolReport?      @relation(fields: [schoolReportId], references: [id])
  session        ExamSession        @relation(fields: [sessionId], references: [id])
  student        Student            @relation(fields: [studentId], references: [id])
  subject        Subject            @relation(fields: [subjectId], references: [id])
  trimester      AcademicTrimester  @relation(fields: [trimesterId], references: [id])

  @@unique([studentId, subjectId, trimesterId, sessionId])
  @@index([studentId, subjectId, trimesterId, sessionId])
  @@map("exam_grades")
}

model ExamGradeHistory {
  id             String            @id @default(uuid())
  oldValue       Float?
  oldQualitative GradeQualitative?
  newValue       Float?
  newQualitative GradeQualitative?
  oldMention     GradeMention?
  newMention     GradeMention?
  updatedById    String
  updatedAt      DateTime          @default(now())
  gradeId        String
  grade          ExamGrade         @relation(fields: [gradeId], references: [id])
  updatedBy      User              @relation(fields: [updatedById], references: [id])

  @@index([gradeId])
  @@index([updatedById])
  @@map("exam_grade_histories")
}

model ExamSessionNotification {
  id            String               @id @default(uuid())
  examSessionId String
  type          ExamNotificationType
  content       String
  status        NotificationStatus
  sentAt        DateTime?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  recipientId   String
  schoolId      String
  sentById      String?
  examSession   ExamSession          @relation(fields: [examSessionId], references: [id])
  recipient     User                 @relation("ExamSessionNotificationRecipient", fields: [recipientId], references: [id])
  school        School               @relation(fields: [schoolId], references: [id])
  sentBy        User?                @relation("ExamSessionNotificationSentBy", fields: [sentById], references: [id])

  @@index([type])
  @@index([status])
  @@index([sentAt])
  @@index([schoolId])
  @@index([recipientId])
  @@index([sentById])
  @@map("exam_session_notifications")
}

model ExamSessionHistory {
  id        String      @id @default(uuid())
  changes   String
  createdAt DateTime    @default(now())
  sessionId String
  userId    String
  schoolId  String
  school    School      @relation(fields: [schoolId], references: [id])
  session   ExamSession @relation(fields: [sessionId], references: [id])
  user      User        @relation(fields: [userId], references: [id])

  @@index([sessionId])
  @@index([createdAt])
  @@index([schoolId])
  @@index([userId])
  @@map("exam_session_histories")
}

model ExamExport {
  id        String      @id @default(uuid())
  format    String
  content   String
  status    String      @default("pending")
  fileName  String
  fileSize  Int
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  sessionId String
  userId    String
  schoolId  String
  school    School      @relation(fields: [schoolId], references: [id])
  session   ExamSession @relation(fields: [sessionId], references: [id])
  user      User        @relation(fields: [userId], references: [id])

  @@index([format])
  @@index([status])
  @@index([createdAt])
  @@index([schoolId])
  @@index([userId])
  @@map("exam_exports")
}

model CahierJournalEntry {
  id            String                      @id @default(uuid())
  schoolId      String
  classId       String
  subjectId     String
  teacherId     String
  date          DateTime
  status        CahierJournalStatus         @default(PLANIFIED)
  content       String
  observations  String?
  duree         Int
  objectifs     String
  competences   String[]
  deroulement   String
  supports      String
  templateId    String?
  createdById   String
  validatedById String?
  createdAt     DateTime                    @default(now())
  updatedAt     DateTime                    @updatedAt
  class         Class                       @relation(fields: [classId], references: [id])
  createdBy     User                        @relation("EntryCreatedBy", fields: [createdById], references: [id])
  school        School                      @relation(fields: [schoolId], references: [id])
  subject       Subject                     @relation(fields: [subjectId], references: [id])
  teacher       Teacher                     @relation(fields: [teacherId], references: [id])
  template      CahierJournalTemplate?      @relation(fields: [templateId], references: [id])
  validatedBy   User?                       @relation("EntryValidatedBy", fields: [validatedById], references: [id])
  exports       CahierJournalExport[]
  history       CahierJournalHistory[]
  notifications CahierJournalNotification[]

  @@index([date])
  @@index([classId])
  @@index([subjectId])
  @@index([status])
  @@index([schoolId])
  @@index([createdById])
  @@index([validatedById])
  @@map("cahier_journal")
}

model CahierJournalTemplate {
  id          String                    @id @default(uuid())
  schoolId    String
  name        String
  type        CahierJournalTemplateType @default(STANDARD)
  content     String
  status      String                    @default("DRAFT")
  competences String[]
  isReusable  Boolean                   @default(false)
  isDefault   Boolean                   @default(false)
  createdById String
  createdAt   DateTime                  @default(now())
  updatedAt   DateTime                  @updatedAt
  entries     CahierJournalEntry[]
  createdBy   User                      @relation("TemplateCreatedBy", fields: [createdById], references: [id])
  school      School                    @relation(fields: [schoolId], references: [id])

  @@index([name])
  @@index([type])
  @@index([isReusable])
  @@index([isDefault])
  @@index([schoolId])
  @@index([createdById])
  @@map("cahier_journal_templates")
}

model CahierJournalExport {
  id              String                    @id @default(uuid())
  cahierJournalId String
  format          CahierJournalExportFormat
  content         String
  status          String                    @default("PENDING")
  fileName        String
  fileSize        Int
  userId          String
  schoolId        String
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  cahierJournal   CahierJournalEntry        @relation(fields: [cahierJournalId], references: [id])
  school          School                    @relation(fields: [schoolId], references: [id])
  user            User                      @relation(fields: [userId], references: [id])

  @@index([format])
  @@index([status])
  @@index([createdAt])
  @@index([schoolId])
  @@index([userId])
  @@map("cahier_journal_exports")
}

model CahierJournalNotification {
  id              String                        @id @default(uuid())
  cahierJournalId String
  type            CahierJournalNotificationType
  content         String
  status          String                        @default("PENDING")
  sentAt          DateTime?
  recipientId     String
  schoolId        String
  sentById        String?
  createdAt       DateTime                      @default(now())
  updatedAt       DateTime                      @updatedAt
  cahierJournal   CahierJournalEntry            @relation(fields: [cahierJournalId], references: [id])
  recipient       User                          @relation("CahierJournalNotificationRecipient", fields: [recipientId], references: [id])
  school          School                        @relation(fields: [schoolId], references: [id])
  sentBy          User?                         @relation("NotificationSentBy", fields: [sentById], references: [id])

  @@index([type])
  @@index([status])
  @@index([sentAt])
  @@index([schoolId])
  @@index([recipientId])
  @@index([sentById])
  @@map("cahier_journal_notifications")
}

model CahierJournalHistory {
  id        String             @id @default(uuid())
  entryId   String
  action    String
  oldValue  String?
  newValue  String?
  reason    String?
  userId    String
  schoolId  String
  createdAt DateTime           @default(now())
  entry     CahierJournalEntry @relation(fields: [entryId], references: [id])
  school    School             @relation(fields: [schoolId], references: [id])
  user      User               @relation(fields: [userId], references: [id])

  @@index([entryId])
  @@index([action])
  @@index([createdAt])
  @@index([schoolId])
  @@index([userId])
  @@map("cahier_journal_histories")
}

model CahierJournalWorkflow {
  id          String   @id @default(uuid())
  name        String
  steps       String[]
  active      Boolean  @default(true)
  schoolId    String
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation("WorkflowCreatedBy", fields: [createdById], references: [id])
  school      School   @relation(fields: [schoolId], references: [id])

  @@index([name])
  @@index([active])
  @@index([schoolId])
  @@index([createdById])
  @@map("cahier_journal_workflows")
}

model AcademicSchedule {
  id            String                         @id @default(uuid())
  schoolId      String
  type          PlanningType
  status        PlanningStatus                 @default(DRAFT)
  startDate     DateTime
  endDate       DateTime
  content       String
  name          String
  description   String?
  createdById   String
  validatedById String?
  createdAt     DateTime                       @default(now())
  updatedAt     DateTime                       @updatedAt
  entries       AcademicScheduleEntry[]
  exports       AcademicScheduleExport[]
  createdBy     User                           @relation("AcademicScheduleCreatedBy", fields: [createdById], references: [id])
  school        School                         @relation(fields: [schoolId], references: [id])
  validatedBy   User?                          @relation("AcademicScheduleValidatedBy", fields: [validatedById], references: [id])
  notifications AcademicScheduleNotification[]

  @@index([type])
  @@index([status])
  @@index([startDate])
  @@index([endDate])
  @@index([schoolId])
  @@index([createdById])
  @@index([validatedById])
  @@map("planning")
}

model AcademicScheduleEntry {
  id            String                         @id @default(uuid())
  date          DateTime
  startTime     String
  endTime       String
  description   String
  location      String?
  scheduleId    String
  classId       String
  subjectId     String
  teacherId     String
  schoolId      String
  createdAt     DateTime                       @default(now())
  updatedAt     DateTime                       @updatedAt
  class         Class                          @relation(fields: [classId], references: [id])
  schedule      AcademicSchedule               @relation(fields: [scheduleId], references: [id])
  school        School                         @relation(fields: [schoolId], references: [id])
  subject       Subject                        @relation(fields: [subjectId], references: [id])
  teacher       User                           @relation(fields: [teacherId], references: [id])
  notifications AcademicScheduleNotification[]

  @@index([date])
  @@index([scheduleId])
  @@index([classId])
  @@index([subjectId])
  @@index([teacherId])
  @@index([schoolId])
  @@map("academic_schedule_entries")
}

model AcademicScheduleNotification {
  id          String                   @id @default(uuid())
  planningId  String?
  type        PlanningNotificationType
  content     String
  status      NotificationStatus       @default(PENDING)
  sentAt      DateTime?
  scheduleId  String?
  entryId     String?
  recipientId String
  schoolId    String
  sentById    String?
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  entry       AcademicScheduleEntry?   @relation(fields: [entryId], references: [id])
  recipient   User                     @relation("AcademicScheduleNotificationRecipient", fields: [recipientId], references: [id])
  schedule    AcademicSchedule?        @relation(fields: [scheduleId], references: [id])
  school      School                   @relation(fields: [schoolId], references: [id])
  sentBy      User?                    @relation("AcademicScheduleNotificationSentBy", fields: [sentById], references: [id])

  @@index([type])
  @@index([status])
  @@index([sentAt])
  @@index([schoolId])
  @@index([recipientId])
  @@index([sentById])
  @@map("planning_notifications")
}

model AcademicScheduleExport {
  id         String           @id @default(uuid())
  format     String
  content    String
  status     String           @default("pending")
  fileName   String
  fileSize   Int
  scheduleId String
  userId     String
  schoolId   String
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  schedule   AcademicSchedule @relation(fields: [scheduleId], references: [id])
  school     School           @relation(fields: [schoolId], references: [id])
  user       User             @relation(fields: [userId], references: [id])

  @@index([format])
  @@index([status])
  @@index([createdAt])
  @@index([schoolId])
  @@index([userId])
  @@map("academic_schedule_exports")
}

model Enrollment {
  id             String       @id @default(uuid())
  studentId      String
  classId        String
  academicYearId String
  status         String       @default("PENDING")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  class          Class        @relation(fields: [classId], references: [id])
  student        Student      @relation(fields: [studentId], references: [id])

  @@unique([studentId, academicYearId])
  @@map("enrollment")
}

model TransferRequest {
  id          String   @id @default(uuid())
  studentId   String
  fromClassId String
  toClassId   String
  status      String   @default("PENDING")
  reason      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  fromClass   Class    @relation("FromClass", fields: [fromClassId], references: [id])
  student     Student  @relation(fields: [studentId], references: [id])
  toClass     Class    @relation("ToClass", fields: [toClassId], references: [id])

  @@map("transfer_requests")
}

model PayrollBatch {
  id           String    @id @default(uuid())
  schoolId     String
  name         String
  periodStart  DateTime
  periodEnd    DateTime
  status       String    @default("PENDING")
  totalAmount  Decimal
  currency     String
  createdById  String
  approvedById String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  payrolls     Payroll[]
  approvedBy   User?     @relation("BatchApprovedBy", fields: [approvedById], references: [id])
  createdBy    User      @relation("BatchCreatedBy", fields: [createdById], references: [id])
  school       School    @relation(fields: [schoolId], references: [id])

  @@index([status])
  @@index([periodStart])
  @@index([periodEnd])
  @@index([createdById])
  @@index([approvedById])
  @@index([schoolId])
  @@map("payroll_batches")
}

model Payroll {
  id           String        @id @default(uuid())
  batchId      String
  employeeId   String
  amount       Decimal
  currency     String        @default("XOF")
  status       PayrollStatus
  paymentId    String?       @unique
  schoolId     String
  createdById  String
  approvedById String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  approvedBy   User?         @relation("ApprovedPayrolls", fields: [approvedById], references: [id])
  batch        PayrollBatch  @relation(fields: [batchId], references: [id])
  createdBy    User          @relation("CreatedPayrolls", fields: [createdById], references: [id])
  employee     Teacher       @relation("EmployeePayrolls", fields: [employeeId], references: [id])
  payment      Payment?      @relation(fields: [paymentId], references: [id])

  @@index([status])
  @@index([batchId])
  @@index([employeeId])
  @@index([createdById])
  @@index([approvedById])
  @@map("payroll")
}

model PayrollSettings {
  id                 String   @id @default(uuid())
  schoolId           String
  currency           String
  taxRate            Float
  socialSecurityRate Float
  minimumSalary      Decimal
  overtimeRate       Float
  paymentDay         Int
  workingDays        Int
  createdById        String
  approvedById       String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  approvedBy         User?    @relation("SettingsApprovedBy", fields: [approvedById], references: [id])
  createdBy          User     @relation("SettingsCreatedBy", fields: [createdById], references: [id])
  school             School   @relation(fields: [schoolId], references: [id])

  @@index([schoolId])
  @@index([createdById])
  @@index([approvedById])
  @@map("payroll_settings")
}

model Expense {
  id            String        @id @default(uuid())
  schoolId      String
  amount        Decimal
  currency      String        @default("XOF")
  description   String
  category      String
  date          DateTime      @default(now())
  dueDate       DateTime?
  paymentMethod String
  status        ExpenseStatus
  paymentId     String?       @unique
  createdById   String
  approvedById  String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  approvedBy    User?         @relation("ExpenseApprovedBy", fields: [approvedById], references: [id])
  createdBy     User          @relation("ExpenseCreatedBy", fields: [createdById], references: [id])
  payment       Payment?      @relation(fields: [paymentId], references: [id])
  school        School        @relation(fields: [schoolId], references: [id])

  @@index([schoolId])
  @@index([date])
  @@index([dueDate])
  @@map("expenses")
}

model Payment {
  id           String        @id @default(uuid())
  amount       Decimal
  currency     String
  status       String
  type         String
  date         DateTime      @default(now())
  dueDate      DateTime?
  method       String
  reference    String?
  description  String?
  schoolId     String
  studentId    String?
  expenseId    String?       @unique
  createdById  String
  approvedById String?
  invoiceId    String?
  closingDayId String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  expense      Expense?
  approvedBy   User?         @relation("PaymentApprovedBy", fields: [approvedById], references: [id])
  closingDay   ClosingDay?   @relation(fields: [closingDayId], references: [id])
  createdBy    User          @relation("PaymentCreatedBy", fields: [createdById], references: [id])
  invoice      Invoice?      @relation(fields: [invoiceId], references: [id])
  school       School        @relation(fields: [schoolId], references: [id])
  student      Student?      @relation(fields: [studentId], references: [id])
  payrolls     Payroll?
  subscription Subscription?

  @@index([schoolId])
  @@index([date])
  @@index([status])
  @@index([method])
  @@index([dueDate])
  @@index([createdById])
  @@index([approvedById])
  @@index([invoiceId])
  @@index([closingDayId])
  @@map("payments")
}

model Document {
  id             String                 @id @default(uuid())
  schoolId       String
  type           DocumentType
  title          String
  content        String
  status         DocumentStatus         @default(DRAFT)
  category       String
  fileUrl        String
  fileName       String
  fileSize       Int
  fileType       String
  uploadedById   String
  schoolReportId String?                @unique
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  exports        DocumentExport[]
  notifications  DocumentNotification[]
  tags           DocumentTag[]
  versions       DocumentVersion[]
  school         School                 @relation(fields: [schoolId], references: [id])
  schoolReport   SchoolReport?          @relation("SchoolReportDocument", fields: [schoolReportId], references: [id])
  uploadedBy     User                   @relation("DocumentUploadedBy", fields: [uploadedById], references: [id])

  @@index([type])
  @@index([category])
  @@index([uploadedById])
  @@index([schoolId])
  @@map("documents")
}

model DocumentTemplate {
  id        String   @id @default(uuid())
  schoolId  String
  type      String
  name      String
  content   String
  status    String   @default("DRAFT")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  school    School   @relation(fields: [schoolId], references: [id])

  @@map("document_templates")
}

model DocumentExport {
  id         String   @id @default(uuid())
  documentId String
  format     String
  content    String
  status     String   @default("PENDING")
  createdAt  DateTime @default(now())
  document   Document @relation(fields: [documentId], references: [id])

  @@map("document_exports")
}

model DocumentNotification {
  id         String   @id @default(uuid())
  documentId String
  type       String
  content    String
  status     String   @default("PENDING")
  createdAt  DateTime @default(now())
  document   Document @relation(fields: [documentId], references: [id])

  @@map("document_notifications")
}

model DocumentVersion {
  id         String   @id @default(uuid())
  content    String
  version    Int
  changes    String
  documentId String
  userId     String
  schoolId   String
  createdAt  DateTime @default(now())
  document   Document @relation(fields: [documentId], references: [id])
  school     School   @relation(fields: [schoolId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@index([documentId])
  @@index([version])
  @@index([createdAt])
  @@index([schoolId])
  @@index([userId])
  @@map("document_versions")
}

model DocumentTag {
  id         String   @id @default(uuid())
  name       String
  color      String
  documentId String
  schoolId   String
  createdAt  DateTime @default(now())
  document   Document @relation(fields: [documentId], references: [id])
  school     School   @relation(fields: [schoolId], references: [id])

  @@index([name])
  @@index([createdAt])
  @@index([schoolId])
  @@map("document_tags")
}

model Setting {
  id        String   @id @default(uuid())
  schoolId  String
  key       String
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  school    School   @relation(fields: [schoolId], references: [id])

  @@unique([schoolId, key])
  @@map("settings")
}

model Log {
  id        String   @id @default(uuid())
  schoolId  String
  userId    String?
  action    String
  details   String
  createdAt DateTime @default(now())
  school    School   @relation(fields: [schoolId], references: [id])

  @@map("logs")
}

model Backup {
  id          String    @id @default(uuid())
  schoolId    String
  type        String
  status      String    @default("PENDING")
  size        BigInt?
  createdAt   DateTime  @default(now())
  completedAt DateTime?
  school      School    @relation(fields: [schoolId], references: [id])

  @@map("backups")
}

model Statistic {
  id        String   @id @default(uuid())
  schoolId  String
  type      String
  period    String
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  school    School   @relation(fields: [schoolId], references: [id])

  @@map("statistics")
}

model Report {
  id            String               @id @default(uuid())
  schoolId      String
  type          String
  title         String
  content       String
  format        String
  status        String               @default("DRAFT")
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  exports       ReportExport[]
  notifications ReportNotification[]
  school        School               @relation(fields: [schoolId], references: [id])

  @@map("reports")
}

model ReportTemplate {
  id        String   @id @default(uuid())
  schoolId  String
  type      String
  name      String
  content   String
  status    String   @default("DRAFT")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  school    School   @relation(fields: [schoolId], references: [id])

  @@map("report_templates")
}

model ReportExport {
  id        String   @id @default(uuid())
  reportId  String
  format    String
  content   String
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  report    Report   @relation(fields: [reportId], references: [id])

  @@map("report_exports")
}

model ReportNotification {
  id        String   @id @default(uuid())
  reportId  String
  type      String
  content   String
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  report    Report   @relation(fields: [reportId], references: [id])

  @@map("report_notifications")
}

model Notification {
  id          String             @id @default(uuid())
  schoolId    String
  title       String
  content     String
  type        NotificationType   @default(SYSTEM)
  status      NotificationStatus @default(PENDING)
  targetRole  String?
  recipientId String
  senderId    String?
  sentAt      DateTime?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  recipient   User               @relation("NotificationRecipient", fields: [recipientId], references: [id])
  school      School             @relation(fields: [schoolId], references: [id])
  sender      User?              @relation("NotificationSender", fields: [senderId], references: [id])

  @@index([type])
  @@index([status])
  @@index([sentAt])
  @@index([schoolId])
  @@index([recipientId])
  @@index([senderId])
  @@map("notifications")
}

model Audit {
  id         String   @id @default(uuid())
  action     String
  userId     String
  entityType String
  entityId   String
  changes    Json?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])

  @@map("audits")
}

model SchoolPromoter {
  id        String   @id @default(uuid())
  userId    String   @unique
  schoolId  String
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  school    School   @relation(fields: [schoolId], references: [id])

  @@index([schoolId])
  @@index([role])
  @@map("school_promoters")
}

model SchoolAdmin {
  id        String    @id @default(uuid())
  userId    String
  schoolId  String
  role      AdminRole
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  school    School    @relation(fields: [schoolId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@unique([userId, schoolId])
  @@map("school_admins")
}

model Budget {
  id          String   @id @default(uuid())
  schoolId    String
  category    String
  amount      Decimal
  currency    String
  description String?
  startDate   DateTime
  endDate     DateTime
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  school      School   @relation(fields: [schoolId], references: [id])

  @@map("budgets")
}

model FeeType {
  id              String             @id @default(uuid())
  name            String
  description     String?
  code            String
  amount          Float
  isRecurring     Boolean            @default(false)
  recurringPeriod String?
  schoolId        String
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  configurations  FeeConfiguration[]
  school          School             @relation(fields: [schoolId], references: [id])
  invoiceItems    InvoiceItem[]

  @@index([schoolId])
  @@map("fee_types")
}

model FeeConfiguration {
  id           String    @id @default(uuid())
  feeTypeId    String
  classLevel   String?
  className    String?
  academicYear String
  amount       Float
  dueDate      DateTime?
  isActive     Boolean   @default(true)
  schoolId     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  feeType      FeeType   @relation(fields: [feeTypeId], references: [id])
  school       School    @relation(fields: [schoolId], references: [id])

  @@unique([feeTypeId, classLevel, className, academicYear], name: "unique_fee_configuration")
  @@index([feeTypeId])
  @@index([schoolId])
  @@index([academicYear])
  @@map("fee_configurations")
}

model Invoice {
  id            String        @id @default(uuid())
  invoiceNumber String        @unique
  studentId     String
  schoolId      String
  academicYear  String
  issueDate     DateTime      @default(now())
  dueDate       DateTime
  status        String
  subtotal      Float
  tax           Float         @default(0)
  discount      Float         @default(0)
  total         Float
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  items         InvoiceItem[]
  school        School        @relation(fields: [schoolId], references: [id])
  student       Student       @relation(fields: [studentId], references: [id])
  payments      Payment[]

  @@index([studentId])
  @@index([schoolId])
  @@index([status])
  @@index([issueDate])
  @@index([dueDate])
  @@map("invoices")
}

model InvoiceItem {
  id          String  @id @default(uuid())
  invoiceId   String
  feeTypeId   String
  description String
  quantity    Float   @default(1)
  unitPrice   Float
  amount      Float
  feeType     FeeType @relation(fields: [feeTypeId], references: [id])
  invoice     Invoice @relation(fields: [invoiceId], references: [id])

  @@index([invoiceId])
  @@index([feeTypeId])
  @@map("invoice_items")
}

model ClosingDay {
  id              String    @id @default(uuid())
  schoolId        String
  closingDate     DateTime  @default(now())
  openingBalance  Float
  closingBalance  Float
  totalIncome     Float
  totalExpenses   Float
  expectedBalance Float
  discrepancy     Float
  status          String
  notes           String?
  cashCount       Json?
  createdById     String
  closedById      String?
  closedAt        DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  closedBy        User?     @relation("ClosingDayClosedBy", fields: [closedById], references: [id])
  createdBy       User      @relation("ClosingDayCreatedBy", fields: [createdById], references: [id])
  school          School    @relation(fields: [schoolId], references: [id])
  payments        Payment[]

  @@index([schoolId])
  @@index([closingDate])
  @@index([status])
  @@index([createdById])
  @@index([closedById])
  @@map("closing_days")
}

model ClassTransfer {
  id           String    @id @default(uuid())
  studentId    String
  fromClassId  String
  toClassId    String
  date         DateTime
  reason       String?
  status       String
  approvedById String?
  approvedAt   DateTime?
  schoolId     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  approvedBy   User?     @relation(fields: [approvedById], references: [id])
  fromClass    Class     @relation("FromClassTransfer", fields: [fromClassId], references: [id])
  school       School    @relation(fields: [schoolId], references: [id])
  student      Student   @relation(fields: [studentId], references: [id])
  toClass      Class     @relation("ToClassTransfer", fields: [toClassId], references: [id])

  @@index([studentId])
  @@index([fromClassId])
  @@index([toClassId])
  @@index([status])
  @@index([schoolId])
  @@index([date])
  @@map("class_transfers")
}

model DisciplinaryIncident {
  id           String   @id @default(uuid())
  studentId    String
  type         String
  description  String
  date         DateTime
  status       String
  resolvedById String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  resolvedBy   User?    @relation(fields: [resolvedById], references: [id])
  student      Student  @relation(fields: [studentId], references: [id])

  @@index([studentId])
  @@index([status])
  @@index([date])
  @@map("disciplinary_incidents")
}

model SecurityLog {
  id          String      @id @default(uuid())
  action      AuditAction
  userId      String
  description String
  ip          String?
  userAgent   String?
  schoolId    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  school      School      @relation(fields: [schoolId], references: [id])
  user        User        @relation(fields: [userId], references: [id])

  @@index([action])
  @@index([userId])
  @@index([createdAt])
  @@index([updatedAt])
  @@map("security_logs")
}

model LoginAttempt {
  id        String   @id @default(uuid())
  email     String
  success   Boolean
  ip        String?
  userAgent String?
  schoolId  String
  createdAt DateTime @default(now())
  school    School   @relation(fields: [schoolId], references: [id])

  @@index([email])
  @@index([success])
  @@index([createdAt])
  @@index([schoolId])
  @@map("login_attempts")
}

model SupportTicket {
  id          String              @id @default(uuid())
  title       String
  description String
  status      String
  priority    String
  type        String
  userId      String
  schoolId    String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  attachments SupportAttachment[]
  messages    SupportMessage[]
  school      School              @relation(fields: [schoolId], references: [id])
  user        User                @relation(fields: [userId], references: [id])

  @@index([status])
  @@index([priority])
  @@index([type])
  @@index([createdAt])
  @@index([schoolId])
  @@index([userId])
  @@map("support_tickets")
}

model SupportMessage {
  id        String        @id @default(uuid())
  content   String
  isStaff   Boolean
  ticketId  String
  userId    String
  schoolId  String
  createdAt DateTime      @default(now())
  school    School        @relation(fields: [schoolId], references: [id])
  ticket    SupportTicket @relation(fields: [ticketId], references: [id])
  user      User          @relation(fields: [userId], references: [id])

  @@index([ticketId])
  @@index([createdAt])
  @@index([schoolId])
  @@index([userId])
  @@map("support_messages")
}

model SupportAttachment {
  id           String        @id @default(uuid())
  fileName     String
  fileType     String
  fileSize     Int
  url          String
  ticketId     String
  schoolId     String
  uploadedById String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  school       School        @relation(fields: [schoolId], references: [id])
  ticket       SupportTicket @relation(fields: [ticketId], references: [id])
  uploadedBy   User          @relation(fields: [uploadedById], references: [id])

  @@index([ticketId])
  @@index([createdAt])
  @@index([schoolId])
  @@index([uploadedById])
  @@map("support_attachments")
}

model StudentAverage {
  id           String        @id @default(uuid())
  trimester    String
  year         String
  level        String
  average      Float
  rank         Int
  rankGender   Int?
  rankExAequo  Boolean
  studentId    String
  classId      String
  schoolId     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  schoolReport SchoolReport?
  class        Class         @relation(fields: [classId], references: [id])
  school       School        @relation(fields: [schoolId], references: [id])
  student      Student       @relation(fields: [studentId], references: [id])

  @@unique([studentId, trimester, year, classId, schoolId])
  @@index([studentId])
  @@index([trimester])
  @@index([year])
  @@index([classId])
  @@index([schoolId])
  @@map("student_averages")
}

model SchoolReport {
  id          String                   @id @default(uuid())
  trimester   String
  year        String
  level       String
  studentId   String
  classId     String
  schoolId    String
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  averageId   String?                  @unique
  document    Document?                @relation("SchoolReportDocument")
  grades      ExamGrade[]
  attachments SchoolReportAttachment[]
  comments    SchoolReportComment[]
  average     StudentAverage?          @relation(fields: [averageId], references: [id])
  class       Class                    @relation(fields: [classId], references: [id])
  school      School                   @relation(fields: [schoolId], references: [id])
  student     Student                  @relation(fields: [studentId], references: [id])

  @@unique([studentId, trimester, year, classId, schoolId])
  @@index([studentId])
  @@index([trimester])
  @@index([year])
  @@index([classId])
  @@index([schoolId])
  @@map("school_reports")
}

model SchoolReportComment {
  id        String       @id @default(uuid())
  content   String
  type      String
  reportId  String
  subjectId String?
  teacherId String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  report    SchoolReport @relation(fields: [reportId], references: [id])
  subject   Subject?     @relation(fields: [subjectId], references: [id])
  teacher   Teacher      @relation(fields: [teacherId], references: [id])

  @@index([reportId])
  @@index([subjectId])
  @@index([teacherId])
  @@map("school_report_comments")
}

model SchoolReportAttachment {
  id           String       @id @default(uuid())
  fileName     String
  fileType     String
  fileSize     Int
  url          String
  reportId     String
  uploadedById String
  createdAt    DateTime     @default(now())
  report       SchoolReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
  uploadedBy   User         @relation(fields: [uploadedById], references: [id], onDelete: Cascade)

  @@index([reportId])
  @@index([uploadedById])
  @@map("school_report_attachments")
}

model SubjectCoefficient {
  id          String   @id @default(uuid())
  coefficient Float
  subjectId   String
  schoolId    String
  level       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  school      School   @relation(fields: [schoolId], references: [id])
  subject     Subject  @relation(fields: [subjectId], references: [id])

  @@unique([subjectId, schoolId, level])
  @@index([subjectId, schoolId])
  @@map("subject_coefficients")
}

model Break {
  id        String   @id @default(uuid())
  name      String
  type      String
  startTime String
  endTime   String
  duration  Int
  levels    String[]
  schoolId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  school    School   @relation(fields: [schoolId], references: [id])

  @@index([schoolId])
  @@map("breaks")
}

model WorkHours {
  id                  String   @id @default(uuid())
  schoolId            String   @unique
  startTime           String
  endTime             String
  lunchBreakStart     String
  lunchBreakEnd       String
  courseDuration      Int
  breakBetweenCourses Int
  workDays            Int[]
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  school              School   @relation(fields: [schoolId], references: [id])

  @@map("work_hours")
}

model RoomReservation {
  id        String   @id @default(uuid())
  roomId    String
  startTime DateTime
  endTime   DateTime
  purpose   String
  status    String
  createdBy String
  schoolId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  room      Room     @relation(fields: [roomId], references: [id])
  school    School   @relation(fields: [schoolId], references: [id])

  @@index([roomId])
  @@index([schoolId])
  @@map("room_reservations")
}

model ScheduleEntry {
  id          String   @id @default(uuid())
  studentId   String
  fromClassId String
  toClassId   String
  date        DateTime
  reason      String?
  status      String
  schoolId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  fromClass   Class    @relation("FromClass", fields: [fromClassId], references: [id])
  school      School   @relation(fields: [schoolId], references: [id])
  student     Student  @relation("StudentScheduleEntries", fields: [studentId], references: [id])
  toClass     Class    @relation("ToClass", fields: [toClassId], references: [id])

  @@index([studentId])
  @@index([fromClassId])
  @@index([toClassId])
  @@index([status])
  @@index([schoolId])
  @@index([date])
  @@map("schedule_entries")
}

model ScheduleExport {
  id         String   @id @default(uuid())
  format     String
  content    String
  status     String   @default("pending")
  fileName   String
  fileSize   Int
  scheduleId String
  userId     String
  schoolId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  schedule   Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  school     School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([format])
  @@index([status])
  @@index([createdAt])
  @@index([schoolId])
  @@index([userId])
  @@map("schedule_exports")
}

model Subscription {
  id        String             @id @default(uuid())
  schoolId  String             @unique
  planId    String
  status    SubscriptionStatus
  startDate DateTime
  endDate   DateTime?
  paymentId String?            @unique
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  grades    Grade[]            @relation("SubscriptionGrades")
  parents   Parent[]           @relation("SubscriptionParents")
  payment   Payment?           @relation(fields: [paymentId], references: [id])
  plan      Plan               @relation("SchoolPlan", fields: [planId], references: [id])
  school    School             @relation("SchoolSubscription", fields: [schoolId], references: [id])
  teachers  Teacher[]          @relation("SubscriptionTeachers")

  @@index([schoolId])
  @@index([planId])
  @@index([status])
  @@index([startDate])
  @@index([endDate])
  @@map("subscriptions")
}

enum Role {
  SUPER_ADMIN
  SCHOOL_ADMIN
  TEACHER
  STUDENT
  PARENT
}

enum DocumentStatus {
  DRAFT
  FINAL
  ARCHIVED
}

enum NotificationStatus {
  PENDING
  SENT
  READ
  FAILED
  CANCELLED
}

enum NotificationType {
  SYSTEM
  REMINDER
  UPDATE
  ALERT
  ANNOUNCEMENT
  PERSONAL
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  ERROR
  IMPORT
  EXPORT
  PASSWORD_RESET
  ROLE_CHANGE
  PERMISSION_CHANGE
  ACCOUNT_LOCK
  ACCOUNT_UNLOCK
  ACCOUNT_DISABLE
  ACCOUNT_ENABLE
  LOGIN_ATTEMPT
  LOGIN_FAILURE
  LOGIN_SUCCESS
}

enum WeekDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum AbsenceStatus {
  UNJUSTIFIED
  JUSTIFIED
  ABSENT
  PRESENT
  EXCUSED
}

enum PaymentStatus {
  PENDING
  PAID
  PARTIALLY_PAID
  OVERPAID
  REFUNDED
  CANCELLED
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  ONLINE_PAYMENT
  CHEQUE
  OTHER
}

enum DocumentType {
  IDENTITY
  MEDICAL
  ACADEMIC
  OTHER
  CAHIER_JOURNAL
  BULLETIN
  TIMETABLE
  REPORT
}

enum EnrollmentStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum TransferStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum CahierJournalStatus {
  PLANIFIED
  IN_PROGRESS
  COMPLETED
  VALIDATED
  REJECTED
  ARCHIVED
}

enum CahierJournalTemplateType {
  STANDARD
  CUSTOM
  REUSABLE
}

enum CahierJournalExportFormat {
  PDF
  DOCX
  XLSX
  CSV
}

enum CahierJournalNotificationType {
  EMAIL
  WHATSAPP
  SMS
  IN_APP
}

enum PlanningStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  CANCELLED
}

enum PlanningType {
  WEEKLY
  MONTHLY
  SEMESTER
  ANNUAL
}

enum PlanningNotificationType {
  REMINDER
  UPDATE
  CANCEL
  RESCHEDULE
}

enum GradeStatus {
  DRAFT
  SUBMITTED
  VALIDATED
  CORRECTED
  PUBLISHED
}

enum GradeType {
  QUALITATIVE
  EM1
  EM2
  EC
  IE1
  IE2
  DS1
  DS2
}

enum CompetenceLevel {
  EXPERT
  AVANCE
  INTERMEDIAIRE
  DEBUTANT
}

enum CompetenceDomain {
  DISCIPLINAIRE
  METHODOLOGIQUE
  SOCIALE_CIVIQUE
  PERSONNELLE_AUTONOMIE
}

enum GradeQualitative {
  TS
  S
  PS
}

enum GradeMention {
  TRES_BIEN
  BIEN
  ASSEZ_BIEN
  PASSABLE
  INSUFFISANT
  TRES_INSUFFISANT
}

enum GradeCalculationMethod {
  QUALITATIVE
  SIMPLE
  WEIGHTED
}

enum GradeImportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum ExamType {
  DS1
  DS2
  DS3
  DS4
  DS5
  DS6
  DS7
  DS8
  EM1
  EM2
  EC
  DS
  DS1_1
  DS1_2
  DS1_3
  DS1_4
  DS1_5
  DS1_6
  DS1_7
  DS1_8
  DS2_1
  DS2_2
  DS2_3
  DS2_4
  DS2_5
  DS2_6
  DS2_7
  DS2_8
  DS3_1
  DS3_2
  DS3_3
  DS3_4
  DS3_5
  DS3_6
  DS3_7
  DS3_8
  DS4_1
  DS4_2
  DS4_3
  DS4_4
  DS4_5
  DS4_6
  DS4_7
  DS4_8
  DS5_1
  DS5_2
  DS5_3
  DS5_4
  DS5_5
  DS5_6
  DS5_7
  DS5_8
  DS6_1
  DS6_2
  DS6_3
  DS6_4
  DS6_5
  DS6_6
  DS6_7
  DS6_8
  DS7_1
  DS7_2
  DS7_3
  DS7_4
  DS7_5
  DS7_6
  DS7_7
  DS7_8
  DS8_1
  DS8_2
  DS8_3
  DS8_4
  DS8_5
  DS8_6
  DS8_7
  DS8_8
  EM1_1
  EM1_2
  EM1_3
  EM1_4
  EM1_5
  EM1_6
  EM1_7
  EM1_8
  EM2_1
  EM2_2
  EM2_3
  EM2_4
  EM2_5
  EM2_6
  EM2_7
  EM2_8
  EC_1
  EC_2
  EC_3
  EC_4
  EC_5
  EC_6
  EC_7
  EC_8
  DS_1
  DS_2
  DS_3
  DS_4
  DS_5
  DS_6
  DS_7
  DS_8
}

enum ExamNotificationType {
  SESSION_CREATED
  SESSION_UPDATED
  SESSION_CANCELLED
  GRADE_PUBLISHED
  GRADE_UPDATED
  REMINDER
  ANNOUNCEMENT
}

enum FeeStatus {
  PENDING
  PAID
  PARTIALLY_PAID
  OVERDUE
  WAIVED
  REFUNDED
}

enum PayrollStatus {
  PENDING
  APPROVED
  PAID
  REJECTED
}

enum UserRole {
  ADMIN
  TEACHER
  STUDENT
  PARENT
  STAFF
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  CANCELLED
  EXPIRED
  PENDING
}

enum AdminRole {
  DIRECTOR
  VICE_DIRECTOR
  SECRETARY
  ACCOUNTANT
  CENSOR
  SUPERVISION
}

enum ExpenseStatus {
  PENDING
  APPROVED
  PAID
  REJECTED
}
